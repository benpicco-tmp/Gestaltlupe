<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="2.34951228949895" />
  <Entry Key="Border.Max.y" Value="2.31479717127725" />
  <Entry Key="Border.Max.z" Value="2.37285787608853" />
  <Entry Key="Border.Min.x" Value="-2.23316652409626" />
  <Entry Key="Border.Min.y" Value="-2.26788164231797" />
  <Entry Key="Border.Min.z" Value="-2.20982093750668" />
  <Entry Key="Formula.Parameters.Para1" Value="2" />
  <Entry Key="Formula.Parameters.Para2" Value="1" />
  <Entry Key="Formula.Parameters.Para3" Value="-0.5" />
  <Entry Key="Formula.Parameters.Para4" Value="-0.5" />
  <Entry Key="Formula.Parameters.Para5" Value="1" />
  <Entry Key="Formula.Parameters.Para6" Value="-0.5" />
  <Entry Key="Formula.Parameters.Para7" Value="-0.5" />
  <Entry Key="Formula.Static.Cycles" Value="12" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="int _bailout=20;&#xA;double _para1=0.5;&#xA;double _para2=1;&#xA;double _para3=2;&#xA;double _para4=0.5;&#xA;double _para5=0.5;&#xA;double _para6=1;&#xA;double _para7=2;&#xA;double _para8=0.5;&#xA;double _para9=0.5;&#xA;&#xA;public override void Init() &#xA;{&#xA;base.Init();&#xA;_para1 = GetOrSetDouble(&quot;Para1&quot;,2,&quot;Ides Formula Parameter 1&quot;);&#xA;_para2 = GetOrSetDouble(&quot;Para2&quot;,2,&quot;Ides Formula Parameter 2&quot;);&#xA;_para3 = GetOrSetDouble(&quot;Para3&quot;,0,&quot;Ides Formula Parameter 3&quot;);&#xA;_para4 = GetOrSetDouble(&quot;Para4&quot;,0,&quot;Ides Formula Parameter 4&quot;);&#xA;_para5 = GetOrSetDouble(&quot;Para5&quot;,-1,&quot;Ides Formula Parameter 5&quot;);&#xA;_para6 = GetOrSetDouble(&quot;Para6&quot;,1,&quot;Ides Formula Parameter 6&quot;);&#xA;_para7 = GetOrSetDouble(&quot;Para7&quot;,0,&quot;Ides Formula Parameter 7&quot;);&#xA;}&#xA;&#xA;        &#xA;public override long InSet(double ar, double ai, double aj, double br, double bi, double bj, double bk, long zkl, bool invers) &#xA;{&#xA;     &#xA;long returnValue=0;&#xA;         &#xA;additionalPointInfo.red=0;&#xA;additionalPointInfo.green=0;&#xA;additionalPointInfo.blue=0;&#xA;            &#xA;double aar = ar * ar; &#xA;double aai = ai * ai; &#xA;double aaj = aj * aj;            &#xA;double d = aar + aai + aaj;&#xA;            &#xA;for (int n = 1; n &lt; zkl; n++) &#xA;{&#xA;  ai = _para1 * ai * aj *ar;                &#xA;  aj = _para2* aaj + _para3 * aai + _para4 * aar;&#xA;  ar = _para5* aar + _para6 * aai + _para7 * aaj;&#xA;  aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;&#xA;  ar+=br;&#xA;  ai+=bi;&#xA;  aj+=bj;&#xA;                &#xA;  aar = ar * ar; aai = ai * ai; aaj = aj * aj;                &#xA;  d = aar + aai + aaj;&#xA;&#xA;  if(d&gt;0 &amp;&amp; n&gt;3) {&#xA;    additionalPointInfo.red+=aar/d;&#xA;    additionalPointInfo.green+=aai/d;&#xA;    additionalPointInfo.blue+=aaj/d;&#xA;  }&#xA;&#xA;  if ((d) &gt; _bailout) { returnValue = n; break; }            &#xA;}&#xA;       &#xA;if (invers) { if (returnValue== 0) returnValue= 1; else returnValue= 0; }&#xA;return returnValue;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="4" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.8845" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="-0.649369115215748" />
  <Entry Key="Border.Max.y" Value="0.127427226031581" />
  <Entry Key="Border.Max.z" Value="0.0845694763199185" />
  <Entry Key="Border.Min.x" Value="-0.868533699774282" />
  <Entry Key="Border.Min.y" Value="-0.0917373585269542" />
  <Entry Key="Border.Min.z" Value="-0.134595108238615" />
  <Entry Key="Formula.Mandelbulb.Pow1" Value="2" />
  <Entry Key="Formula.Mandelbulb.Pow2" Value="2" />
  <Entry Key="Formula.Mandelbulb.Pow3" Value="2" />
  <Entry Key="Formula.Static.Cycles" Value="55" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0.18" />
  <Entry Key="Formula.Static.jy" Value="-0.13" />
  <Entry Key="Formula.Static.jz" Value="-0.26" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="55" />
  <Entry Key="Intern.Formula.Source" Value="// Kali Set&#xA;// Original Thread: http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/&#xA;&#xA;public override long InSet(double x, double y, double z,  double br, double bi, double bj, double bk, long zkl, bool inverse) &#xA;{&#xA;&#xA;long tw=0;&#xA;double xx = x*x; &#xA;double yy = y*y; &#xA;double zz = z*z;&#xA;double m= xx + yy + zz;&#xA;&#xA;additionalPointInfo.red=0;&#xA;additionalPointInfo.green=0;&#xA;additionalPointInfo.blue=0;&#xA;&#xA;for (int n = 1; n &lt; zkl; n++) &#xA;{&#xA;  if(m!=0) &#xA;  {&#xA;    x=x/m+br;&#xA;    y=Math.Abs(y)/m+bi;&#xA;    z=Math.Abs(z)/m+bj;&#xA;  } &#xA;  else &#xA;  {&#xA;    x+=br;&#xA;    y+=bi;&#xA;    z+=bj;&#xA;  }&#xA;&#xA;  xx = x * x; yy = y * y; zz = z * z;&#xA;  m= xx + yy + zz;&#xA;  if(m!=0) &#xA;  {&#xA;    additionalPointInfo.red+=xx/m;&#xA;    additionalPointInfo.green+=yy/m;&#xA;    additionalPointInfo.blue+=zz/m;&#xA;  }&#xA;            &#xA;  if (m &gt; 110) { &#xA;    tw = n; &#xA;    break; &#xA;  }&#xA;&#xA;}&#xA;&#xA;if (inverse) &#xA;{&#xA;  if (tw == 0)&#xA;    tw = 1;&#xA;  else&#xA;    tw = 0;&#xA;}&#xA;&#xA;return (tw);&#xA;&#xA;}&#xA;&#xA;" />
  <Entry Key="Transformation.AngleX" Value="23" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="42" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-150" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.3" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
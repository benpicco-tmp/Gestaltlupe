<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="-0.127356195701876" />
  <Entry Key="Border.Max.y" Value="-1.76482853223594" />
  <Entry Key="Border.Max.z" Value="-0.354435364712975" />
  <Entry Key="Border.Min.x" Value="-0.366253111822388" />
  <Entry Key="Border.Min.y" Value="-2.00372544835645" />
  <Entry Key="Border.Min.z" Value="-0.593332280833487" />
  <Entry Key="Formula.Static.Cycles" Value="7060" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0.89" />
  <Entry Key="Formula.Static.jy" Value="0.02" />
  <Entry Key="Formula.Static.jz" Value="0.025" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="// Simplified Mandelbox with scale = 1&#xA;public override long InSet (double x, double y, double z,  &#xA;                            double br, double bi, double bj, double bk, &#xA;                            long zkl, bool inverse) &#xA;{&#xA;&#xA;  double bailout=50000; &#xA;  long returnValue=0;&#xA;  double xx = 0; &#xA;  double yy = 0; &#xA;  double zz = 0; &#xA;  double r = 0;&#xA;&#xA;  // Surface Coloring&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;&#xA;  for (int n = 1; n &lt; zkl; n++) &#xA;  {&#xA;&#xA;    if (x &gt; 1) x = 2.0 - x; &#xA;    if (y &lt; -1) y = -2.0 - y;&#xA;    if (z &lt; -1) z = -2.0 - z;&#xA;              &#xA;    xx=x*x;yy=y*y;zz=z*z;&#xA;    r = xx + yy + zz;&#xA;&#xA;    // Colors&#xA;    if(r!=0) &#xA;    {&#xA;      additionalPointInfo.red+=xx/r;&#xA;      additionalPointInfo.green+=yy/r;&#xA;      additionalPointInfo.blue+=zz/r;&#xA;    }&#xA;            &#xA;    if (r &gt; bailout) &#xA;    {  &#xA;      returnValue = n; &#xA;      break; &#xA;    }&#xA;  &#xA;    if (r &lt; 1 &amp;&amp; r&gt;0) &#xA;    {&#xA;      x/=r;&#xA;      y/=r;&#xA;      z/=r;&#xA;    }&#xA;&#xA;    x+=br;&#xA;    y+=bi;&#xA;    z+=bj;&#xA; }&#xA;&#xA;  // For inside rendering&#xA;  if (inverse) {if (returnValue == 0) returnValue = 1; else returnValue = 0; } &#xA;  return returnValue; &#xA;}&#xA;&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="180" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.3" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
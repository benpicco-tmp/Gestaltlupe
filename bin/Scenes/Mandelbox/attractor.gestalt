<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="-32.0583478986454" />
  <Entry Key="Border.Max.y" Value="-40.8933432967062" />
  <Entry Key="Border.Max.z" Value="-40.9591998548336" />
  <Entry Key="Border.Min.x" Value="-32.0653166114296" />
  <Entry Key="Border.Min.y" Value="-40.9003120094904" />
  <Entry Key="Border.Min.z" Value="-40.9661685676178" />
  <Entry Key="Formula.Parameters.scale" Value="1.1" />
  <Entry Key="Formula.Static.Cycles" Value="256" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="&#xA;public override void Init() {&#xA;  base.Init();&#xA;  _scale=GetOrSetDouble(&quot;scale&quot;,1.1,&quot;Mandelbox scale factor.&quot;);&#xA;}&#xA;&#xA;double _scale=1.1;&#xA;&#xA;// Mandelbox&#xA;public override long InSet( double x, double y, double z,  &#xA;                            double br, double bi, double bj, double bk, &#xA;                            long zkl, bool inverse) &#xA;{&#xA;&#xA; double bailout=50000;&#xA; double xx, yy, zz;&#xA; long returnValue=0;&#xA; double r = 0;&#xA;&#xA; additionalPointInfo.red=0;&#xA; additionalPointInfo.green=0;&#xA; additionalPointInfo.blue=0;&#xA;          &#xA; for (int n = 1; n &lt; zkl; n++) &#xA; {&#xA;         &#xA;  if (x &gt; 1)           &#xA;    x = 2.0 - x;           &#xA;  else if (x &lt; -1)             &#xA;    x = -2.0 - x;&#xA;                      &#xA;  if (y &gt; 1)            &#xA;    y = 2.0 - y;        &#xA;  else if (y &lt; -1)             &#xA;    y = -2.0 - y;&#xA;                        &#xA;  if (z &gt; 1)              &#xA;    z = 2.0 - z;            &#xA;  else if (z &lt; -1)             &#xA;    z = -2.0 - z;&#xA;                                   &#xA;  xx = x * x; yy = y * y; zz = z * z;&#xA;  r = xx + yy + zz;&#xA;&#xA;  if(r!=0) &#xA;  {&#xA;    additionalPointInfo.red+=xx/r;&#xA;    additionalPointInfo.green+=yy/r;&#xA;    additionalPointInfo.blue+=zz/r;&#xA;  }&#xA;         &#xA;  if (r &gt; bailout) &#xA;  {            &#xA;    returnValue = n; &#xA;    break;          &#xA;  }&#xA;&#xA;  double mult=_scale;&#xA;  if (r &lt; 1 &amp;&amp; r!=0)&#xA;    mult=_scale/r;&#xA;&#xA;  x*=mult; y*=mult; z*=mult;&#xA;  x+=br; y+=bi; z+=bj;&#xA; &#xA; }&#xA;        &#xA; if (inverse) &#xA; {         &#xA;  if (returnValue == 0)          &#xA;    returnValue = 1;          &#xA;  else            &#xA;    returnValue = 0;        &#xA; }        &#xA; return returnValue;    &#xA;}&#xA;&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="-116.033618990789" />
  <Entry Key="Transformation.Camera.AngleY" Value="-41.6906711383335" />
  <Entry Key="Transformation.Camera.AngleZ" Value="44.845240008607" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.3" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="3.70054251419745" />
  <Entry Key="Border.Max.y" Value="1.57926517205192" />
  <Entry Key="Border.Max.z" Value="-4.10746829479682" />
  <Entry Key="Border.Min.x" Value="3.60822621430427" />
  <Entry Key="Border.Min.y" Value="1.48694887215874" />
  <Entry Key="Border.Min.z" Value="-4.19978459468999" />
  <Entry Key="Formula.Static.Cycles" Value="250" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0.5" />
  <Entry Key="Formula.Static.jz" Value="-3" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="&#xA;// Mandelbox with fold at 0.5 and scale = 1&#xA;public override long InSet(double x, double y, double z,  &#xA;                           double br, double bi, double bj, double bk, &#xA;                           long zkl, bool invers) &#xA;{&#xA;&#xA;double bailout=20;&#xA;long returnValue=0; &#xA;double xx = x * x; &#xA;double yy = y * y; &#xA;double zz = z * z; &#xA;double r = Math.Sqrt(xx + yy + zz);&#xA;&#xA;// Surface Coloring&#xA;additionalPointInfo.red=0;&#xA;additionalPointInfo.green=0;&#xA;additionalPointInfo.blue=0;&#xA;&#xA;for (int n = 1; n &lt; zkl; n++) &#xA;{&#xA;&#xA;  if (x &gt; 0.5) x = 1.0 - x; else &#xA;  if (x &lt; -0.5) x = -1.0 - x;&#xA;             &#xA;  if (y &gt; 0.5)    y = 1.0 - y;  else&#xA;  if (y &lt; -0.5) y = -1.0 - y;&#xA;             &#xA;  if (z &gt; 0.5)   z = 1.0 - z; else&#xA;  if (z &lt; -0.5) z = -1.0 - z;&#xA;              &#xA;  xx=x*x;yy=y*y;zz=z*z;&#xA;  r = xx + yy + zz;&#xA;&#xA;  //  Surface Coloring&#xA;  if(r!=0) {&#xA;    additionalPointInfo.red+=xx/r;&#xA;    additionalPointInfo.green+=yy/r;&#xA;    additionalPointInfo.blue+=zz/r;&#xA;  }&#xA;            &#xA;  if (r &gt; bailout) {  returnValue = n; break; }&#xA;&#xA;  if (r &lt; 1 &amp;&amp; r&gt;0) &#xA;  {&#xA;    x/=r;&#xA;    y/=r;&#xA;    z/=r;&#xA;  }&#xA;  x+=br;&#xA;  y+=bi;&#xA;  z+=bj;&#xA;}&#xA;&#xA;if (invers) {if (returnValue == 0) returnValue = 1; else returnValue = 0; } &#xA;return returnValue; &#xA;}&#xA;&#xA;" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.AngleX" Value="-40" />
  <Entry Key="Transformation.Camera.AngleY" Value="9.99999999999999" />
  <Entry Key="Transformation.Camera.AngleZ" Value="90" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.5" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
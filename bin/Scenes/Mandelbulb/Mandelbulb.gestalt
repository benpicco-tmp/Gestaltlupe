<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="0.998127425823011" />
  <Entry Key="Border.Max.y" Value="1.40703964865489" />
  <Entry Key="Border.Max.z" Value="0.999848655744081" />
  <Entry Key="Border.Min.x" Value="-1.04671150464825" />
  <Entry Key="Border.Min.y" Value="-0.637799281816369" />
  <Entry Key="Border.Min.z" Value="-1.04499027472718" />
  <Entry Key="Formula.Parameters.Power" Value="8" />
  <Entry Key="Formula.Static.Cycles" Value="8" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="&#xA;public override void Init() { &#xA;  base.Init();&#xA;  additionalPointInfo=new AdditionalPointInfo();&#xA;&#xA;   _power=GetOrSetDouble(&quot;Power&quot;,8,&quot;Mandelbulb Power.&quot;);&#xA;  &#xA;  // Set bailout to handle none integer iterations.&#xA;  // Works well for _power=8&#xA;  double gr1=GetDouble(&quot;Formula.Static.Cycles&quot;);&#xA;  int tempGr=(int)gr1;&#xA;  gr1=gr1- tempGr;&#xA;  gr1=1-gr1;&#xA;  gr1*=2.4;&#xA;  _bailout = Math.Pow(10,gr1)+1.0;&#xA;}&#xA;&#xA;double _bailout=20;&#xA;double _power=8;&#xA;&#xA;// Daniel Whites cosine Mandelbulb &#xA;// http://www.skytopia.com/project/fractal/mandelbulb.html&#xA;&#xA;public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;  double aar, aai, aaj;&#xA;  long returnValue=0;&#xA; &#xA;  double theta, phi;&#xA;  double r_n = 0;&#xA;  aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;  double r = Math.Sqrt(aar + aai + aaj);&#xA;  double  phi_pow,theta_pow,sin_theta_pow,rn_sin_theta_pow;&#xA;&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;&#xA;  for (int n = 1; n &lt; zkl; n++) {&#xA;    theta = Math.Atan2(Math.Sqrt(aar + aai), aj);&#xA;    phi = Math.Atan2(ai, ar);&#xA;    r_n = Math.Pow(r, _power);&#xA;    phi_pow=phi*_power;&#xA;    theta_pow=theta*_power;&#xA;    sin_theta_pow=Math.Sin(theta_pow);&#xA;    rn_sin_theta_pow=r_n* sin_theta_pow;&#xA;    ar =  rn_sin_theta_pow * Math.Cos(phi_pow)+br;&#xA;    ai = rn_sin_theta_pow * Math.Sin(phi_pow)+bi;&#xA;    aj = r_n * Math.Cos(theta_pow)+bj;&#xA;    aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;    r = Math.Sqrt(aar + aai + aaj);&#xA;    if(n&gt;zkl/3 &amp;&amp; n&lt;zkl/1.2)&#xA;    {&#xA;      additionalPointInfo.red+=aar/r;&#xA;      additionalPointInfo.green+=aai/r;&#xA;      additionalPointInfo.blue+=aaj/r;&#xA;    }&#xA;    if (r &gt; _bailout) { returnValue = n; break; }&#xA;  }&#xA;&#xA;  if (invers) {&#xA;     if (returnValue == 0)&#xA;        returnValue = 1;&#xA;      else&#xA;        returnValue = 0;&#xA;  }&#xA;  return returnValue;&#xA;}&#xA;&#xA;&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
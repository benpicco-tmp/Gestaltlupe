<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Static.Cycles" Value="57" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public override long InSet(&#xA;                            double ar, double ai, double aj,  &#xA;                            double br, double bi, double bj, double bk, &#xA;                            long zkl, bool inverse) &#xA;{&#xA;            &#xA;long returnValue=0;&#xA;double pow = 2;&#xA;double bailout = 20;  &#xA;double theta, phi;&#xA;double r_n = 0;&#xA;double aar = ar * ar; &#xA;double aai = ai * ai; &#xA;double aaj = aj * aj;            &#xA;double r = Math.Sqrt(aar + aai + aaj);       &#xA;double phi_pow;&#xA;double theta_pow;&#xA;double sin_theta_pow;&#xA;double rn_sin_theta_pow;&#xA;&#xA;additionalPointInfo.red=0;&#xA;additionalPointInfo.green=0;&#xA;additionalPointInfo.blue=0;&#xA;&#xA;double red=0; double green=0; double blue=0;&#xA;&#xA;double piAdd=Math.PI/2.0;&#xA;            &#xA;for (int n = 1; n &lt; zkl; n++) &#xA;{&#xA;                &#xA;  theta = 1.0*Math.Atan2(Math.Sqrt(aar + aai), aj);              &#xA;  phi = 1.0*Math.Atan2(ai, ar);                             &#xA;  r_n=r;&#xA;  phi_pow=phi*pow;              &#xA;  theta_pow=theta*pow;               &#xA;  sin_theta_pow=Math.Sin(theta_pow+piAdd);              &#xA;  rn_sin_theta_pow=r_n* sin_theta_pow;&#xA;&#xA;  ar =  rn_sin_theta_pow * Math.Cos(phi_pow+Math.PI)+br;&#xA;  ai = rn_sin_theta_pow * Math.Sin(phi_pow+Math.PI)+bi;              &#xA;  aj = r_n * Math.Cos(theta_pow+piAdd)+bj;&#xA;              &#xA;  aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;               &#xA;  r = aar + aai + aaj;&#xA;&#xA;  red=aar;&#xA;  green=aai;&#xA;  blue=aaj;&#xA;&#xA;  if (r &gt; bailout ) { returnValue = n; break; }&#xA;            &#xA;}&#xA;&#xA;additionalPointInfo.red=red;&#xA;additionalPointInfo.green=green;&#xA;additionalPointInfo.blue=blue;&#xA;            &#xA;if (inverse) &#xA;{                &#xA;if (returnValue == 0)                    &#xA;  returnValue = 1;              &#xA;else                    &#xA;  returnValue = 0;          &#xA;}&#xA;         &#xA;return returnValue;&#xA;&#xA;        &#xA;}&#xA;&#xA;&#xA;" />
  <Entry Key="Intern.Version" Value="4" />
  <Entry Key="Scene.CenterX" Value="-0.726109432792603" />
  <Entry Key="Scene.CenterY" Value="-0.232777060991386" />
  <Entry Key="Scene.CenterZ" Value="4.68021878069439E-07" />
  <Entry Key="Scene.Radius" Value="0.000390273679097092" />
  <Entry Key="Transformation.Camera.AngleX" Value="-90.5039563203785" />
  <Entry Key="Transformation.Camera.AngleY" Value="13.0377446441215" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-91.599005419735" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="View.Perspective" Value="1" />
</ParameterDict>
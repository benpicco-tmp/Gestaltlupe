<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="-0.387406204191186" />
  <Entry Key="Border.Max.y" Value="2.43185848525041" />
  <Entry Key="Border.Max.z" Value="0.529846299684068" />
  <Entry Key="Border.Min.x" Value="-0.387425216423436" />
  <Entry Key="Border.Min.y" Value="2.43183947301815" />
  <Entry Key="Border.Min.z" Value="0.529827287451818" />
  <Entry Key="Formula.Static.Cycles" Value="120" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0.000" />
  <Entry Key="Formula.Static.jy" Value="0.00" />
  <Entry Key="Formula.Static.jz" Value="0.000" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="public override void Init() {&#xD;&#xA;      additionalPointInfo=new AdditionalPointInfo();&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Mandelbox&#xD;&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;  double gr=1112.5;&#xD;&#xA;  double xx, yy, zz;&#xD;&#xA;  long tw;&#xD;&#xA;  int n;&#xD;&#xA;  double x=ar,y=ai,z=aj;&#xD;&#xA;&#xD;&#xA;  additionalPointInfo.red=0;&#xD;&#xA;  additionalPointInfo.green=0;&#xD;&#xA;  additionalPointInfo.blue=0;&#xD;&#xA;&#xD;&#xA;          xx = x * x; yy = y * y; zz = z * z; &#xD;&#xA;          tw = 0L;&#xD;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;  double scale = -1.1;&#xD;&#xA;&#xD;&#xA;int xcount=0;&#xD;&#xA;int ycount=0;&#xD;&#xA;int zcount=0;&#xD;&#xA;&#xD;&#xA;          for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;//              ; fold box onto itself  &#xD;&#xA;              if (x &gt; 1) {&#xD;&#xA;                x = 2.0 - x;&#xD;&#xA;xcount++;&#xD;&#xA;}&#xD;&#xA;              else if (x &lt; -1) {&#xD;&#xA;                x = -2.0 - x;&#xD;&#xA;xcount++;&#xD;&#xA;}&#xD;&#xA;             &#xD;&#xA;              if (y &gt; 1) {&#xD;&#xA;                y = 2.0 - y;&#xD;&#xA;ycount++;&#xD;&#xA;}&#xD;&#xA;              else if (y &lt; -1) {&#xD;&#xA;                y = -2.0 - y;&#xD;&#xA;ycount++;&#xD;&#xA;}&#xD;&#xA;             &#xD;&#xA;              if (z &gt; 1) {&#xD;&#xA;                z = 2.0 - z;&#xD;&#xA;zcount++;&#xD;&#xA;}&#xD;&#xA;              else if (z &lt; -1) {&#xD;&#xA;                z = -2.0 - z;&#xD;&#xA;zcount++;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;              &#xD;&#xA;            //  ; fold sphere onto itself&#xD;&#xA;              double fixedRadius = 1;&#xD;&#xA;              double minRadius = 0.000001;&#xD;&#xA;   double length=   r=x*x + y*y + z*z;&#xD;&#xA;   double mult=1;&#xD;&#xA;&#xD;&#xA;    if (length &lt; minRadius) {&#xD;&#xA;     //   mult=Math.Sqrt(fixedRadius)/Math.Sqrt(minRadius);&#xD;&#xA;    }   else if (length &lt; fixedRadius) {&#xD;&#xA;        mult=fixedRadius/length;&#xD;&#xA;  }&#xD;&#xA;   mult*=scale;&#xD;&#xA;   x*=mult;&#xD;&#xA;   y*=mult;&#xD;&#xA;   z*=mult;&#xD;&#xA; &#xD;&#xA; x+=br;&#xD;&#xA;   y+=bi;&#xD;&#xA;   z+=bj;&#xD;&#xA;&#xD;&#xA;       if (length &gt; gr) { &#xD;&#xA;              tw = n; break; &#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;additionalPointInfo.red=xcount;&#xD;&#xA;additionalPointInfo.green=ycount;&#xD;&#xA;additionalPointInfo.blue=zcount;&#xD;&#xA;&#xD;&#xA;          if (invers) {&#xD;&#xA;            if (tw == 0)&#xD;&#xA;              tw = 1;&#xD;&#xA;            else&#xD;&#xA;              tw = 0;&#xD;&#xA;          }&#xD;&#xA;          return (tw);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;" />
  <Entry Key="Transformation.AngleX" Value="45" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="45" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
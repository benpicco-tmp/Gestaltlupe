<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="1" />
  <Entry Key="Border.Max.x" Value="-2.01390351530985" />
  <Entry Key="Border.Max.y" Value="0.00011864152309521" />
  <Entry Key="Border.Max.z" Value="-2.01377045887322" />
  <Entry Key="Border.Min.x" Value="-2.0157378470201" />
  <Entry Key="Border.Min.y" Value="-0.0018157113856314" />
  <Entry Key="Border.Min.z" Value="-2.01560514600112" />
  <Entry Key="Formula.Static.Cycles" Value="200" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Intern.Formula.Source" Value="/* v=abs(v)folding Mandelbox Gestaltlupe Formula*/public override void Init() {base.Init();additionalPointInfo=new AdditionalPointInfo();}public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {double gr=50000; double xx, yy, zz;long tw;int n;double x=0,y=0,z=0;double r_n = 0;xx = x * x; yy = y * y; zz = z * z;tw = 0L;&#xD;&#xA; double r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;&#xD;&#xA;// This fixid to a special non Julia-variant &#xD;&#xA;  double scale = 1.05;&#xD;&#xA;&#xD;&#xA;  // Surface Coloring&#xD;&#xA;  additionalPointInfo.red=0;&#xD;&#xA;  additionalPointInfo.green=0;&#xD;&#xA;  additionalPointInfo.blue=0;&#xD;&#xA;&#xD;&#xA;  for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;  // Original box fold is replaced by x=abs(x); y=abs(y); z=abs(z)&#xD;&#xA;  // Inspired by the work of Kali. &#xD;&#xA;   &#xD;&#xA;  // Comment out to use the original (Tglad) Mandelbox formula.&#xD;&#xA;&#xD;&#xA;  // if (x &gt; 1) x = 2.0 - x; else &#xD;&#xA;  if (x &lt; -1) x = -2.0 - x;&#xD;&#xA;             &#xD;&#xA;  // if (y &gt; 1)    y = 2.0 - y;  else&#xD;&#xA;  if (y &lt; -1) y = -2.0 - y;&#xD;&#xA;             &#xD;&#xA;  // if (z &gt; 1)   z = 2.0 - z; else&#xD;&#xA;  if (z &lt; -1) z = -2.0 - z;&#xD;&#xA;              &#xD;&#xA;  //  ; fold sphere onto itself&#xD;&#xA;  double fixedRadius = 1;&#xD;&#xA;  double minRadius = 0.00001;&#xD;&#xA;&#xD;&#xA;  xx=x*x;yy=y*y;zz=z*z;&#xD;&#xA;  double length=   r = xx + yy + zz;&#xD;&#xA;&#xD;&#xA;// Colors&#xD;&#xA;  if(r!=0) {&#xD;&#xA;  additionalPointInfo.red+=0.5*xx/r;&#xD;&#xA;  additionalPointInfo.green+=0.5*yy/r;&#xD;&#xA;  additionalPointInfo.blue+=zz/r;&#xD;&#xA;  }&#xD;&#xA;            &#xD;&#xA;  // Bailout Condition&#xD;&#xA;  if (length &gt; gr) {  tw = n; break; }&#xD;&#xA;&#xD;&#xA; double mult=1;&#xD;&#xA;&#xD;&#xA; if (length &lt; minRadius) {&#xD;&#xA; //     mult=Math.Sqrt(fixedRadius)/(minRadius);&#xD;&#xA; }   else&#xD;&#xA; if (length &lt; fixedRadius) {&#xD;&#xA;   mult=Math.Sqrt(fixedRadius)/(length);&#xD;&#xA; }&#xD;&#xA; mult*=scale;&#xD;&#xA; x*=mult;&#xD;&#xA; y*=mult;&#xD;&#xA; z*=mult;&#xD;&#xA;&#xD;&#xA;// In Julia Mode: the fixed Julia values &#xD;&#xA;// Iin Mandelbrot set mode: the room coordinates of the pixel to test &#xD;&#xA;   x+=br;&#xD;&#xA;   y+=bi;&#xD;&#xA;   z+=bj;&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;// For inside rendering&#xD;&#xA;if (invers) {if (tw == 0) tw = 1; else tw = 0; } &#xD;&#xA;&#xD;&#xA;  // Warning: this valaue can be very dangereus, if it is used for distanve esitmation:&#xD;&#xA;  // &#xD;&#xA;  return (tw); &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="180" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.3" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
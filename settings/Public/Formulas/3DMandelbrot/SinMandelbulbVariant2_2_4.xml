<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="30" />
  <Entry Key="Border.Max.x" Value="1.20844802406892" />
  <Entry Key="Border.Max.y" Value="2.13079462572856" />
  <Entry Key="Border.Max.z" Value="2.0337272037359" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-1.47772063828682" />
  <Entry Key="Border.Min.y" Value="-0.555374036638267" />
  <Entry Key="Border.Min.z" Value="-0.241400606817077" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Computation.NoOfThreads" Value="8" />
  <Entry Key="Formula.Mandelbulb.Pow1" Value="" />
  <Entry Key="Formula.Mandelbulb.Pow2" Value="" />
  <Entry Key="Formula.Mandelbulb.Pow3" Value="" />
  <Entry Key="Formula.Static.Cycles" Value="16" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="/// &lt;summary&gt;&#xA;        /// Initialisierung&#xA;        /// &lt;/summary&gt;&#xA;        public override void Init() {&#xA;            base.Init();&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xA;additionalPointInfo=new AdditionalPointInfo();&#xA;          gr1=GetDouble(&quot;Formula.Static.Cycles&quot;);&#xA;int tempGr=(int)gr1;&#xA;gr1=gr1- tempGr;&#xA;gr1=1-gr1;&#xA;gr1*=2.4;&#xA;&#xA;        }&#xA;&#xA; double gr1=0;&#xA;&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;            double aar, aai, aaj;&#xA;            long tw;&#xA;            int n;&#xA;//            int pow = 8; // n=8 entspricht dem Mandelbulb&#xA;              int pow = 2; // n=8 entspricht dem Mandelbulb&#xA;                double gr =Math.Pow(10,gr1)+1.0;  //   10; // Ab diesem Wert liegt mit Sicherheit Nichtzugehörigkeit zur Menge vor.&#xA;            double theta, phi;&#xA;&#xA;            double r_n = 0;&#xA;            aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;            tw = 0L;&#xA;            double r = Math.Sqrt(aar + aai + aaj);&#xA;&#xA;             double      phi_pow;&#xA;             double       theta_pow;&#xA;             double    sin_theta_pow;&#xA;              double  rn_sin_theta_pow;&#xA;/*&#xA;if(bj&gt;0) return 1;&#xA;//if(bj&lt;0) return 0;&#xA;//if(bj&lt;0.5)&#xA;//bj=bj*15.0;&#xA;*/&#xA;&#xA;additionalPointInfo.red=0;&#xA;additionalPointInfo.green=0;&#xA;additionalPointInfo.blue=0;&#xA;&#xA;double red=0; double green=0; double blue=0;&#xA;&#xA;double piAdd=Math.PI/2.0;&#xA;            for (n = 1; n &lt; zkl; n++) {&#xA;&#xA;                theta = 1.0*Math.Atan2(Math.Sqrt(aar + aai), aj);&#xA;                phi = 1.0*Math.Atan2(ai, ar);&#xA;                //r_n = Math.Pow(r, pow);&#xA;                r_n=r;&#xA;                &#xA;&#xA;                phi_pow=phi*pow;&#xA;                theta_pow=theta*pow;&#xA;                sin_theta_pow=Math.Sin(theta_pow+piAdd);&#xA;                rn_sin_theta_pow=r_n* sin_theta_pow;&#xA;&#xA;&#xA;                ar =  rn_sin_theta_pow * Math.Cos(phi_pow+Math.PI)+br;&#xA;              //  ai = rn_sin_theta_pow * Math.Sin(phi_pow+Math.PI)+bi;&#xA;                 ai = rn_sin_theta_pow * Math.Sin(phi_pow+Math.PI)+bi;&#xA;                aj = r_n * Math.Cos(theta_pow+piAdd)+bj;&#xA;&#xA;                aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;                //r = Math.Sqrt(aar + aai + aaj);&#xA;r = aar + aai + aaj;&#xA;&#xA;&#xA;red=aar;&#xA;green=aai;&#xA;blue=aaj;&#xA;&#xA;&#xA;                if (r &gt; gr) { tw = n; break; }&#xA;&#xA;            }&#xA;&#xA;additionalPointInfo.red=red;&#xA;additionalPointInfo.green=green;&#xA;additionalPointInfo.blue=blue;&#xA;&#xA;&#xA;            if (invers) {&#xA;                if (tw == 0)&#xA;                    tw = 1;&#xA;                else&#xA;                    tw = 0;&#xA;            }&#xA;&#xA;//if(red&lt;=blue || red&lt;=green) {tw=1;}&#xA;            return (tw);&#xA;&#xA;        }&#xA;" />
  <Entry Key="Renderer.AmbientIntensity" Value="6" />
  <Entry Key="Renderer.BackColor.Blue" Value="0.3" />
  <Entry Key="Renderer.BackColor.Green" Value="0.25" />
  <Entry Key="Renderer.BackColor.Red" Value="0.25" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="0" />
  <Entry Key="Renderer.Light.X" Value="0.45" />
  <Entry Key="Renderer.Light.Y" Value="1" />
  <Entry Key="Renderer.Light.Z" Value="0.45" />
  <Entry Key="Renderer.LightIntensity" Value="0.3" />
  <Entry Key="Renderer.MaxFieldOfView" Value="1" />
  <Entry Key="Renderer.MinFieldOfView" Value="0.4" />
  <Entry Key="Renderer.Normalize" Value="1" />
  <Entry Key="Renderer.ShadowJustify" Value="2" />
  <Entry Key="Renderer.ShadowNumber" Value="26" />
  <Entry Key="Renderer.Shininess" Value="8" />
  <Entry Key="Renderer.ShininessFactor" Value="0.5" />
  <Entry Key="Renderer.UseDarken" Value="0" />
  <Entry Key="Renderer.UseLight" Value="1" />
  <Entry Key="Renderer.UseSharpShadow" Value="0" />
  <Entry Key="Transformation.Camera.AngleX" Value="30" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Deph" Value="800" />
  <Entry Key="View.DephAdd" Value="0" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.PosterX" Value="0" />
  <Entry Key="View.PosterZ" Value="0" />
  <Entry Key="View.Raster" Value="2" />
  <Entry Key="View.Size" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="30" />
  <Entry Key="Border.Max.x" Value="0.461930426603619" />
  <Entry Key="Border.Max.y" Value="2.33100375197539" />
  <Entry Key="Border.Max.z" Value="1.28404341814846" />
  <Entry Key="Border.Min.x" Value="-2.58744229615007" />
  <Entry Key="Border.Min.y" Value="-0.718368970778014" />
  <Entry Key="Border.Min.z" Value="-1.7653293045618" />
  <Entry Key="Formula.Static.Cycles" Value="120" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="120" />
  <Entry Key="Intern.Formula.Source" Value="'vb.net&#xD;&#xA;&#xD;&#xA;Overrides sub Init() &#xD;&#xA;  MyBase.Init()&#xD;&#xA;  additionalPointInfo=new AdditionalPointInfo()&#xD;&#xA;end sub&#xD;&#xA;&#xD;&#xA;Overrides Function InSet(ar as Double,ai as Double,aj as Double,br as Double, bi as double, bj as Double,  bk as Double, zkl as long, inverse as Boolean) As long&#xD;&#xA;&#xD;&#xA;additionalPointInfo.red =0&#xD;&#xA;additionalPointInfo.green=0&#xD;&#xA;additionalPointInfo.blue=0&#xD;&#xA;&#xD;&#xA;dim gr as Double&#xD;&#xA;gr=1100000&#xD;&#xA;&#xD;&#xA;dim tw as long&#xD;&#xA;tw=0&#xD;&#xA;dim n as integer&#xD;&#xA;&#xD;&#xA;dim x, y, z as Double&#xD;&#xA;x=ar&#xD;&#xA;y=ai&#xD;&#xA;z=aj&#xD;&#xA;dim m as Double&#xD;&#xA;dim xx, yy, zz as Double&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;for  n = 1 to zkl &#xD;&#xA;&#xD;&#xA;  xx = x * x&#xD;&#xA;  yy = y * y&#xD;&#xA;  zz = z * z&#xD;&#xA;  m= xx + yy + zz&#xD;&#xA;&#xD;&#xA;  if m &gt; gr then&#xD;&#xA;    tw = n&#xD;&#xA;    exit for&#xD;&#xA;  end if&#xD;&#xA;&#xD;&#xA;if(m&lt;&gt;0) then&#xD;&#xA;additionalPointInfo.red =additionalPointInfo.red +0.2*xx/m&#xD;&#xA;additionalPointInfo.green=additionalPointInfo.green+0.2*yy/m&#xD;&#xA;additionalPointInfo.blue=zz/m&#xD;&#xA;end if&#xD;&#xA;&#xD;&#xA;if(m&lt;&gt;0)  then&#xD;&#xA;x=Math.Abs(x)/m+br&#xD;&#xA;y=Math.Abs(y)/m+bi&#xD;&#xA;z=Math.Abs(z)/m+bj&#xD;&#xA;else&#xD;&#xA;x=Math.Abs(x)+br&#xD;&#xA;y=Math.Abs(y)+bi&#xD;&#xA;z=Math.Abs(z)+bj&#xD;&#xA;&#xD;&#xA;end if&#xD;&#xA;&#xD;&#xA;next&#xD;&#xA;&#xD;&#xA; if  inverse=true then&#xD;&#xA;   if tw = 0 then&#xD;&#xA;      tw = 1&#xD;&#xA;    else&#xD;&#xA;      tw = 0&#xD;&#xA;  end if&#xD;&#xA; end if&#xD;&#xA;&#xD;&#xA;return tw&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;End Function" />
  <Entry Key="Transformation.AngleX" Value="23" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="42" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-15" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.3" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
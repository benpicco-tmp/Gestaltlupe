<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="0.151408482212002" />
  <Entry Key="Border.Max.y" Value="0.354712096447531" />
  <Entry Key="Border.Max.z" Value="0.703198356511955" />
  <Entry Key="Border.Min.x" Value="-2.17994136316264" />
  <Entry Key="Border.Min.y" Value="-1.97663774892711" />
  <Entry Key="Border.Min.z" Value="-1.62815148886268" />
  <Entry Key="Formula.Static.Cycles" Value="256" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="256" />
  <Entry Key="Intern.Formula.Source" Value="public override void Init() {base.Init();additionalPointInfo=new AdditionalPointInfo();&#xA;scale=GetDouble(&quot;Formula.Mandelbox.Scale&quot;);&#xA;_s=GetDouble(&quot;Formula.Mandelbox.S&quot;);&#xA;sjulia=GetDouble(&quot;Formula.Mandelbox.SJulia&quot;);&#xA;if(GetString(&quot;Formula.Mandelbox.Use4D&quot;)==&quot;1&quot;)&#xA;  use4d=true;&#xA;}&#xA;&#xA;double scale=1.04;&#xA;double _s=0;&#xA;double sjulia=0;&#xA;bool use4d=false;&#xA;&#xA;&#xA;// Simplified Mandelbox&#xA;public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;&#xA;  double gr=8000000; // bailoutValue&#xA;  double xx, yy, zz; // temp var&#xA;  long tw=0; // boring &#xA;  int n;&#xA;  double x=ar,y=ai,z=aj;&#xA;  double s=_s,ss=s*s;&#xA;  double mult=1;&#xA;  xx = x * x; yy = y * y; zz = z * z; &#xA;  double r = xx + yy + zz;&#xA;  if(use4d) {&#xA;    r+=ss;&#xA;  }&#xA;  // Surface Coloring&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;&#xA;  for (n = 1; n &lt; zkl; n++) {&#xA;&#xA;  // Original box fold is replaced by x=abs(x); y=abs(y); z=abs(z)&#xA;  // Inspired by the work of Kali. &#xA;   &#xA;  if (x &lt; -1) x = -2.0 - x;&#xA;  if (y &lt; -1) y = -2.0 - y;&#xA;  if (z &lt; -1) z = -2.0 - z;              &#xA;  xx=x*x;yy=y*y;zz=z*z;&#xA;  r = xx + yy + zz;&#xA;  if(use4d) {&#xA;    if (s &lt; -1) s = -2.0 - s;              &#xA;    ss=s*s;&#xA;    r+=ss;&#xA;  }&#xA;&#xA;&#xA;  // Colors&#xA;  if(r!=0) {&#xA;    additionalPointInfo.red+=xx/r;&#xA;    additionalPointInfo.green+=yy/r;&#xA;    additionalPointInfo.blue+=zz/r;&#xA;  }&#xA;            &#xA;  // Bailout Condition&#xA;  if (r &gt; gr) { tw = n; break; }&#xA;  if (r &lt; 1 &amp;&amp; r&gt;0) {&#xA;    mult=1.0/r;&#xA;  }else &#xA;mult=1;&#xA;   mult*=scale;&#xA;   x*=mult;&#xA;   y*=mult;&#xA;   z*=mult;&#xA; if(use4d) {&#xA;   s*=mult;&#xA; }&#xA;&#xA;// In Julia Mode: the fixed Julia values &#xA;// Iin Mandelbrot set mode: the room coordinates of the pixel to test &#xA;   x+=br;&#xA;   y+=bi;&#xA;   z+=bj;&#xA;   if(use4d) {&#xA;     s+=sjulia;&#xA;   }&#xA; }&#xA;&#xA;// For inside rendering&#xA;if (invers) {if (tw == 0) tw = 1; else tw = 0; } &#xA;&#xA;  // Warning: this valaue can be very dangereus, if it is used for distanve esitmation:&#xA;  // &#xA;  return (tw); &#xA;}&#xA;&#xA;&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="50" />
  <Entry Key="Transformation.Camera.AngleY" Value="30" />
  <Entry Key="Transformation.Camera.AngleZ" Value="45" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.5" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
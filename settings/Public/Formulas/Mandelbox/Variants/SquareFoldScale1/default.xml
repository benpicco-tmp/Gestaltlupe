<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="0.0905349794238659" />
  <Entry Key="Border.Max.y" Value="0.609053497942383" />
  <Entry Key="Border.Max.z" Value="0.0905349794238659" />
  <Entry Key="Border.Min.x" Value="-2.0164609053498" />
  <Entry Key="Border.Min.y" Value="-1.49794238683128" />
  <Entry Key="Border.Min.z" Value="-2.0164609053498" />
  <Entry Key="Formula.Static.Cycles" Value="1200" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="1200" />
  <Entry Key="Intern.Formula.Source" Value="public override void Init() {base.Init();additionalPointInfo=new AdditionalPointInfo();}&#xA;&#xA;//  Mandelbox Variant&#xA;public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;&#xA;  double gr=50000; // bailoutValue&#xA;  double xx, yy, zz;&#xA;  long tw=0; // return value&#xA;  int n;&#xA;  double x=0,y=0,z=0;&#xA;  xx = x * x; yy = y * y; zz = z * z; &#xA;  double r = Math.Sqrt(xx + yy + zz);&#xA;&#xA;  // Surface Coloring&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;&#xA;  for (n = 1; n &lt; zkl; n++) {&#xA;    x=x+1;&#xA;    x=x*x;&#xA;    x=x-1;&#xA;    y=y+1;&#xA;    y=y*y;&#xA;    y=y-1;             &#xA;    z=z+1;&#xA;    z=z*z;&#xA;    z=z-1;             &#xA;&#xA;  xx=x*x;yy=y*y;zz=z*z;&#xA;  r = xx + yy + zz;&#xA;&#xA;// Colors&#xA;  if(r!=0) {&#xA;  additionalPointInfo.red+=xx/r;&#xA;  additionalPointInfo.green+=yy/r;&#xA;  additionalPointInfo.blue+=zz/r;&#xA;  }&#xA;            &#xA;  // Bailout Condition&#xA;  if (r &gt; gr) {  tw = n; break; }&#xA;&#xA; if (r &lt; 1 &amp;&amp; r&gt;0) {&#xA;  x/=r;&#xA;  y/=r;&#xA;  z/=r;&#xA; }&#xA;&#xA;// In Julia Mode: the fixed Julia values &#xA;// Iin Mandelbrot set mode: the room coordinates of the pixel to test &#xA;   x+=br;&#xA;   y+=bi;&#xA;   z+=bj;&#xA; }&#xA;&#xA;// For inside rendering&#xA;if (invers) {if (tw == 0) tw = 1; else tw = 0; } &#xA;  return (tw); &#xA;}&#xA;&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.7" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
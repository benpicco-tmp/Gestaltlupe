<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="-0.663516997233994" />
  <Entry Key="Border.Max.y" Value="0.463338563683465" />
  <Entry Key="Border.Max.z" Value="0.0504578344497709" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-0.664158944938378" />
  <Entry Key="Border.Min.y" Value="0.462917285502459" />
  <Entry Key="Border.Min.z" Value="0.0500967388660497" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="100" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="int gr=20;&#xD;&#xA;&#xD;&#xA;/// &lt;summary&gt;&#xD;&#xA;        /// Initialisierung&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xD;&#xA;&#xD;&#xA;additionalPointInfo=new AdditionalPointInfo();&#xD;&#xA;  scaleY=GetDouble(&quot;Formula.Mandelbulb.Pow1&quot;);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;double scaleY=1;&#xD;&#xA;//double scaleY=10000000000000000;&#xD;&#xA;&#xD;&#xA;        public override long InSet(double ar, double ai, double aj, double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            double aar, aai, ai_alt, aj_alt, aaj, cj, ck, ari, arj, ark, aik, aij, ajk, ak_alt;&#xD;&#xA;            double c, d;&#xD;&#xA;            long tw;&#xD;&#xA;            int n;&#xD;&#xA;&#xD;&#xA;additionalPointInfo.red=0;&#xD;&#xA;additionalPointInfo.green=0;&#xD;&#xA;additionalPointInfo.blue=0;&#xD;&#xA;&#xD;&#xA;if(bj&gt;0)&#xD;&#xA;return 1;&#xD;&#xA;&#xD;&#xA;bj=-bj*bj;&#xD;&#xA;//bj=-bj*bj;&#xD;&#xA;//scaleY=1;&#xD;&#xA;bj*=scaleY;&#xD;&#xA;//bj*=1.0;&#xD;&#xA;&#xD;&#xA;double ak=1,aak=0,al=0,aal=0;&#xD;&#xA;aj=1;&#xD;&#xA;            aar = ar * ar; aai = ai * ai; aaj = aj * aj;aak=ak*ak; tw = 0L;&#xD;&#xA;            d = aar + aai + aaj;&#xD;&#xA;            for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;                ai = 2.0*ai * ar *aj+bi;&#xD;&#xA;                aj = aaj -(aaj-aj)* (aar+aai) +(aj-1)* (0.001*ar*aj) +bj;&#xD;&#xA;                ar = aar -aai-aaj+br;&#xD;&#xA;&#xD;&#xA;                aar = ar * ar; aai = ai * ai; aaj = aj * aj;aak=ak*ak;&#xD;&#xA;                d = aar + aai + aaj;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if(d&gt;0 &amp;&amp;n&gt;zkl/2.0) {&#xD;&#xA;additionalPointInfo.red+=aar/d;&#xD;&#xA;additionalPointInfo.green+=aai/d;&#xD;&#xA;additionalPointInfo.blue+=aaj/d;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if ((d) &gt; gr) { tw = n; break; }&#xD;&#xA;  }&#xD;&#xA;  return (tw);&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;" />
  <Entry Key="Transformation.AngleX" Value="-40" />
  <Entry Key="Transformation.AngleY" Value="40" />
  <Entry Key="Transformation.AngleZ" Value="180" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.45" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="720" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Width" Value="1280" />
</ParameterDict>
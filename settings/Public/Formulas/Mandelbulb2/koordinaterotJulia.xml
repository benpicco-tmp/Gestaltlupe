<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="0.887901234567899" />
  <Entry Key="Border.Max.y" Value="1.67407407407407" />
  <Entry Key="Border.Max.z" Value="1.0320987654321" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-0.830617283950615" />
  <Entry Key="Border.Min.y" Value="-0.0444444444444431" />
  <Entry Key="Border.Min.z" Value="-0.686419753086417" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="21" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0.4" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="/// &lt;summary&gt;&#xD;&#xA;        /// Initialisierung&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xD;&#xA;&#xD;&#xA;  additionalPointInfo=new AdditionalPointInfo();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;double gr=2;&#xD;&#xA;int pow = 2; // n=8 entspricht dem Mandelbulb&#xD;&#xA;double xx, yy, zz;&#xD;&#xA;          long tw;&#xD;&#xA;          int n;&#xD;&#xA;//          ai = 0; aj = 0; ak = 0;&#xD;&#xA;&#xD;&#xA;          double x=ar,y=ai,z=aj;&#xD;&#xA;          double r_n = 0;&#xD;&#xA;&#xD;&#xA;          xx = x * x; yy = y * y; zz = z * z; &#xD;&#xA;          tw = 0L;&#xD;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;/*&#xD;&#xA;if(bi&gt;0)&#xD;&#xA;return 1;&#xD;&#xA;bi=0.1*bi;&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;additionalPointInfo.red=0;additionalPointInfo.green=0;additionalPointInfo.blue=0;&#xD;&#xA;          for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            &#xD;&#xA;          double r_xy=Math.Sqrt(xx+yy);&#xD;&#xA;  //  double r_xy=xx+yy;&#xD;&#xA;                     &#xD;&#xA;&#xD;&#xA;//1. Runde&#xD;&#xA;  double a = 1;&#xD;&#xA;            &#xD;&#xA;            if(r_xy!=0.0)&#xD;&#xA;             a= 1 - zz *( r_xy);&#xD;&#xA;&#xD;&#xA;            y=2 *x*y*a;&#xD;&#xA;            x = (xx - yy) * a;&#xD;&#xA;            z = 2 * z * r_xy;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;double tempX=x;&#xD;&#xA;x=y;&#xD;&#xA;y=z;&#xD;&#xA;z=tempX;&#xD;&#xA;&#xD;&#xA;    xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;&#xD;&#xA;// 2.Runde &#xD;&#xA;  a = 1;&#xD;&#xA;            &#xD;&#xA;            if(r_xy!=0.0)&#xD;&#xA;             a= 1 - zz *( r_xy);&#xD;&#xA;&#xD;&#xA;            y=2 *x*y*a;&#xD;&#xA;            x = (xx - yy) * a;&#xD;&#xA;            z = 2 * z * r_xy;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;tempX=x;&#xD;&#xA;x=y;&#xD;&#xA;y=z;&#xD;&#xA;z=tempX;&#xD;&#xA;&#xD;&#xA;    xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;&#xD;&#xA;// 3.Runde &#xD;&#xA;  a = 1;&#xD;&#xA;            &#xD;&#xA;            if(r_xy!=0.0)&#xD;&#xA;             a= 1 - zz *( r_xy);&#xD;&#xA;&#xD;&#xA;            y=2 *x*y*a;&#xD;&#xA;            x = (xx - yy) * a;&#xD;&#xA;            z = 2 * z * r_xy;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;tempX=x;&#xD;&#xA;x=y;&#xD;&#xA;y=z;&#xD;&#xA;z=tempX;&#xD;&#xA;&#xD;&#xA;//    xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;&#xD;&#xA;x+=br;&#xD;&#xA;y+=bi;&#xD;&#xA;z+=bj;&#xD;&#xA;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;            &#xD;&#xA;if(n&gt;3 &amp;&amp; n&lt;50) {&#xD;&#xA;&#xD;&#xA;if(x&gt;0)&#xD;&#xA;additionalPointInfo.red+=x/r;&#xD;&#xA;if(y&gt;0)&#xD;&#xA;additionalPointInfo.green+=y/r;&#xD;&#xA;if(z&gt;0)&#xD;&#xA;additionalPointInfo.blue+=z/r;&#xD;&#xA;&#xD;&#xA;if(x&lt;0)&#xD;&#xA;additionalPointInfo.red-=x/r;&#xD;&#xA;if(y&lt;0)&#xD;&#xA;additionalPointInfo.green-=y/r;&#xD;&#xA;if(z&lt;0)&#xD;&#xA;additionalPointInfo.blue-=z/r;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Farbwert nach oben fixieren&#xD;&#xA;if(additionalPointInfo.red&gt;10000)&#xD;&#xA;  additionalPointInfo.red=10000;&#xD;&#xA;if(additionalPointInfo.green&gt;10000)&#xD;&#xA;  additionalPointInfo.green=10000;&#xD;&#xA;if(additionalPointInfo.blue&gt;10000)&#xD;&#xA;  additionalPointInfo.blue=10000;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            if (r &gt; gr) { &#xD;&#xA;              tw = n; break; &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          if (invers) {&#xD;&#xA;            if (tw == 0)&#xD;&#xA;              tw = 1;&#xD;&#xA;            else&#xD;&#xA;              tw = 0;&#xD;&#xA;          }&#xD;&#xA;          return (tw);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" />
  <Entry Key="Transformation.AngleX" Value="-50" />
  <Entry Key="Transformation.AngleY" Value="-30" />
  <Entry Key="Transformation.AngleZ" Value="-20" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.45" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="720" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1280" />
</ParameterDict>
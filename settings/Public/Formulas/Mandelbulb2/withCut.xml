<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="0.387583766639675" />
  <Entry Key="Border.Max.y" Value="0.247222222222222" />
  <Entry Key="Border.Max.z" Value="0.0833580792927319" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="0.338865723748557" />
  <Entry Key="Border.Min.y" Value="-0.197222222222222" />
  <Entry Key="Border.Min.z" Value="0.0292879738055545" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="33" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0.66" />
  <Entry Key="Formula.Static.jz" Value="0.6" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="/// &lt;summary&gt;&#xD;&#xA;        /// Initialisierung&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;double gr=2;&#xD;&#xA;int pow = 2; // n=8 entspricht dem Mandelbulb&#xD;&#xA;double xx, yy, zz;&#xD;&#xA;          long tw;&#xD;&#xA;          int n;&#xD;&#xA;//          ai = 0; aj = 0; ak = 0;&#xD;&#xA;if(bi&gt;0)&#xD;&#xA;return 1;&#xD;&#xA;&#xD;&#xA;          double x=0,y=0,z=0;&#xD;&#xA;          double r_n = 0;&#xD;&#xA;&#xD;&#xA;          xx = x * x; yy = y * y; zz = z * z; &#xD;&#xA;          tw = 0L;&#xD;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;&#xD;&#xA;          for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            &#xD;&#xA;            double r_xy=Math.Sqrt(xx+yy);&#xD;&#xA;            double a = 1;&#xD;&#xA;            &#xD;&#xA;            if(r_xy!=0.0)&#xD;&#xA;             a= 1 - zz / r_xy;&#xD;&#xA;&#xD;&#xA;            y=2 *x*y*a+bj;&#xD;&#xA;            x = (xx - yy) * a+br;&#xD;&#xA;            z = 2 * z * r_xy+bi;&#xD;&#xA;              /*&#xD;&#xA;            ar = r_n * LinearSin(theta * pow) * LinearCos(phi * pow);&#xD;&#xA;            ai = r_n * LinearSin(theta * pow) * LinearSin(phi * pow);&#xD;&#xA;            aj = r_n * LinearCos(theta * pow);&#xD;&#xA;&#xD;&#xA;            ar += br;&#xD;&#xA;            ai += bi;&#xD;&#xA;            aj += bj;&#xD;&#xA;            */&#xD;&#xA;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xD;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;            &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            if (r &gt; gr) { &#xD;&#xA;              tw = n; break; &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          if (invers) {&#xD;&#xA;            if (tw == 0)&#xD;&#xA;              tw = 1;&#xD;&#xA;            else&#xD;&#xA;              tw = 0;&#xD;&#xA;          }&#xD;&#xA;          return (tw);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" />
  <Entry Key="Transformation.AngleX" Value="-40" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="View.Height" Value="1000" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1000" />
</ParameterDict>
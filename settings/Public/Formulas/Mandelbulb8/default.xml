<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="0.719890260631001" />
  <Entry Key="Border.Max.y" Value="1.21661740581033" />
  <Entry Key="Border.Max.z" Value="1.00667581161409" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-0.719890260631001" />
  <Entry Key="Border.Min.y" Value="-0.223163115451668" />
  <Entry Key="Border.Min.z" Value="-0.433104709647918" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="7.8" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="/// &lt;summary&gt;&#xA;        /// Initialisierung&#xA;        /// &lt;/summary&gt;&#xA;        public override void Init() {&#xA;            base.Init();&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xA;additionalPointInfo=new AdditionalPointInfo();&#xA;          dzkl=GetDouble(&quot;Formula.Static.Cycles&quot;);&#xA;gr1=dzkl;&#xA;int tempGr=(int)gr1;&#xA;gr1=gr1- tempGr;&#xA;gr1=1-gr1;&#xA;gr1*=2.4;&#xA; dzkl2=GetDouble(&quot;Formula.Static.MinCycle&quot;);&#xA;gr2=dzkl2;&#xA;tempGr=(int)gr2;&#xA;gr2=gr2- tempGr;&#xA;gr2=1-gr2;&#xA;gr2*=2.4;&#xA;}&#xA;&#xA;double gr1=0;&#xA;double gr2=0;&#xA;double dzkl=0;&#xA;double dzkl2=0;&#xA;&#xA;&#xA;&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;            double aar, aai, aaj;&#xA;            long tw;&#xA;            int n;&#xA;            int pow = 8; // n=8 entspricht dem Mandelbulb&#xA;                double gr =Math.Pow(10,gr1)+1.0;  //  Bailout&#xA;if(invers)&#xA;   gr =Math.Pow(10,gr2)+1.0;    &#xA;&#xA;double ddiff=dzkl-((int)dzkl);&#xA;if(invers)&#xA;  ddiff=dzkl2-((int)dzkl2);&#xA;&#xA;       double theta, phi;&#xA;&#xA;            double r_n = 0;&#xA;            aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;            tw = 0L;&#xA;            double r = Math.Sqrt(aar + aai + aaj);&#xA;&#xA;             double      phi_pow;&#xA;             double       theta_pow;&#xA;             double    sin_theta_pow;&#xA;              double  rn_sin_theta_pow;&#xA;&#xA;additionalPointInfo.red=0;&#xA;additionalPointInfo.green=0;&#xA;additionalPointInfo.blue=0;&#xA;int colordiff=0; &#xA;int colorzklTest=0;&#xA;int colorrange=1;&#xA;            for (n = 1; n &lt; zkl; n++) {&#xA;&#xA;                theta = Math.Atan2(Math.Sqrt(aar + aai), aj);&#xA;                phi = Math.Atan2(ai, ar);&#xA;                r_n = Math.Pow(r, pow);&#xA;&#xA;                phi_pow=phi*pow;&#xA;                theta_pow=theta*pow;&#xA;                sin_theta_pow=Math.Sin(theta_pow);&#xA;               rn_sin_theta_pow=r_n* sin_theta_pow;&#xA;&#xA;                ar =  rn_sin_theta_pow * Math.Cos(phi_pow)+br;&#xA;                ai = rn_sin_theta_pow * Math.Sin(phi_pow)+bi;&#xA;                aj = r_n * Math.Cos(theta_pow)+bj;&#xA;&#xA;                aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;                r = aar + aai + aaj;&#xA;&#xA;colorzklTest=colordiff+n;&#xA;&#xA;if(colorzklTest==zkl-1-colorrange) {&#xA;additionalPointInfo.red+=(1.0-ddiff)*aar/r;&#xA;additionalPointInfo.green+=(1.0-ddiff)*aai/r;&#xA;additionalPointInfo.blue+=(1.0-ddiff)*aaj/r;&#xA;}&#xA;&#xA;&#xA;if(colorzklTest&gt;zkl-1-colorrange &amp;&amp; colorzklTest&lt;zkl-1) {&#xA;additionalPointInfo.red+=aar/r;&#xA;additionalPointInfo.green+=aai/r;&#xA;additionalPointInfo.blue+=aaj/r;&#xA;}&#xA;&#xA;if(colorzklTest==zkl-1) {&#xA;additionalPointInfo.red+=(ddiff)*aar/r;&#xA;additionalPointInfo.green+=(ddiff)*aai/r;&#xA;additionalPointInfo.blue+=(ddiff)*aaj/r;&#xA;}&#xA;&#xA;&#xA;r = Math.Sqrt(r);&#xA;&#xA;                if (r &gt; gr) { tw = n; break; }&#xA;&#xA;            }&#xA;&#xA;            if (invers) {&#xA;                if (tw == 0)&#xA;                    tw = 1;&#xA;                else&#xA;                    tw = 0;&#xA;            }&#xA;&#xA;            return (tw);&#xA;&#xA;        }&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="30" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
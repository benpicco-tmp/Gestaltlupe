<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="4" />
  <Entry Key="Border.Max.x" Value="0.823123375165151" />
  <Entry Key="Border.Max.y" Value="7.67134795167436" />
  <Entry Key="Border.Max.z" Value="1.3781421719883" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-1.73689327581516" />
  <Entry Key="Border.Min.y" Value="-8.21524879791906" />
  <Entry Key="Border.Min.z" Value="-1.38775783634682" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Composite.AmbientLight" Value="0" />
  <Entry Key="Composite.BackgoundDarken" Value="0" />
  <Entry Key="Composite.Blurring" Value="0" />
  <Entry Key="Composite.BlurringDeph" Value="0" />
  <Entry Key="Composite.Color1Factor" Value="50" />
  <Entry Key="Composite.Color1TestArea" Value="10" />
  <Entry Key="Composite.FrontLight" Value="1" />
  <Entry Key="Composite.Normalize" Value="1" />
  <Entry Key="Composite.Renderer" Value="6" />
  <Entry Key="Composite.Renderer.Universal.AmbientLightIntensity" Value="0.4" />
  <Entry Key="Composite.Renderer.Universal.Brightening" Value="0" />
  <Entry Key="Composite.Renderer.Universal.ComicStyle" Value="1" />
  <Entry Key="Composite.Renderer.Universal.FrontLightIntensity" Value="0.1" />
  <Entry Key="Composite.Renderer.Universal.NormalizeColors" Value="0" />
  <Entry Key="Composite.Renderer.Universal.UseAmbient" Value="1" />
  <Entry Key="Composite.Renderer.Universal.UseColorFromFormula" Value="1" />
  <Entry Key="Composite.Renderer.Universal.UseDarken" Value="1" />
  <Entry Key="Composite.Renderer.Universal.UseMedianColorFromFormula" Value="1" />
  <Entry Key="Composite.Shininess" Value="2" />
  <Entry Key="Composite.UseAmbient" Value="1" />
  <Entry Key="Composite.UseColor1" Value="0" />
  <Entry Key="Composite.UseDarken" Value="0" />
  <Entry Key="Composite.UseDerivation" Value="1" />
  <Entry Key="Composite.UseMedian" Value="1" />
  <Entry Key="Computation.NoOfThreads" Value="8" />
  <Entry Key="Formula.Mandelbulb.Pow1" Value="1" />
  <Entry Key="Formula.Mandelbulb.Pow2" Value="0.5" />
  <Entry Key="Formula.Mandelbulb.Pow3" Value="0.5" />
  <Entry Key="Formula.Static.Cycles" Value="23" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="3.25E-05" />
  <Entry Key="Formula.Static.jy" Value="3.25E-05" />
  <Entry Key="Formula.Static.jz" Value="7.5E-06" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Formula.VecRot.Angle1Mult" Value="2" />
  <Entry Key="Formula.VecRot.Angle1Rot" Value="1" />
  <Entry Key="Formula.VecRot.Angle1Type" Value="2" />
  <Entry Key="Formula.VecRot.Angle2Mul" Value="_not_used" />
  <Entry Key="Formula.VecRot.Angle2Mult" Value="2" />
  <Entry Key="Formula.VecRot.Angle2Rot" Value="1" />
  <Entry Key="Formula.VecRot.Angle2Type" Value="2" />
  <Entry Key="Formula.VecRot.Angle3Mult" Value="0" />
  <Entry Key="Formula.VecRot.Angle3Rot" Value="0" />
  <Entry Key="Formula.VecRot.Angle3Type" Value="0" />
  <Entry Key="Formula.VecRot.Mult1" Value="1" />
  <Entry Key="Formula.VecRot.Mult2" Value="1" />
  <Entry Key="Formula.VecRot.Mult3" Value="0" />
  <Entry Key="Formula.VecRot.Power" Value="1" />
  <Entry Key="Intern.Formula.Source" Value="int gr=20;&#xD;&#xA;  public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;           additionalPointInfo=new AdditionalPointInfo();&#xD;&#xA;&#xD;&#xA;// The following must be called if this formula is inserted via text copy, because&#xD;&#xA;// the formula needs the following additional variables,&#xD;&#xA;// After the first time, the following must be &quot;comment in&quot;, because&#xD;&#xA;// otherwise all user setting in this variables will be overridden.&#xD;&#xA;&#xD;&#xA;// Rotation Angle Corresponding Angle Type&#xD;&#xA;// 0 : (1,0,0)&#xD;&#xA;// 1: (0,1,0);&#xD;&#xA;// 2: (0,0,1);&#xD;&#xA;// 3: Plane including  point (x,y,z) and line (0,0,0)+t(0,0,1);&#xD;&#xA;// 4: Plane including  point (x,y,z) and line (0,0,0)+t(0,1,0);&#xD;&#xA;// 5: Plane including  point (x,y,z) and line (0,0,0)+t(1,0,0);&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; AddValue(&quot;Formula.VecRot.Mult1&quot;,2);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle1Mult&quot;,2);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle1Type&quot;,3);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle1Rot&quot;,3);&#xD;&#xA;&#xD;&#xA; AddValue(&quot;Formula.VecRot.Mult2&quot;,2);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle2Mult&quot;,1);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle2Type&quot;,1);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle2Rot&quot;,3);&#xD;&#xA;&#xD;&#xA; AddValue(&quot;Formula.VecRot.Mult3&quot;,2);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle3Mult&quot;,2);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle3Type&quot;,2);&#xD;&#xA; AddValue(&quot;Formula.VecRot.Angle3Rot&quot;,3);&#xD;&#xA;&#xD;&#xA; AddValue(&quot;Formula.VecRot.Power&quot;,2);&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     public override long InSet(double ar, double ai, double aj, double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;          double xx, yy, zz;&#xD;&#xA;          long tw;&#xD;&#xA;          int n;&#xD;&#xA;          double x = ar, y = ai, z = aj;&#xD;&#xA;&#xD;&#xA;          xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;          tw = 0;&#xD;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;          Fractrace.Geometry.VecRotation vecRot = new Fractrace.Geometry.VecRotation();&#xD;&#xA;&#xD;&#xA;double mult1=GetDouble(&quot;Formula.VecRot.Mult1&quot;);&#xD;&#xA;double mult2=GetDouble(&quot;Formula.VecRot.Angle1Mult&quot;);&#xD;&#xA;double mult3=GetDouble(&quot;Formula.VecRot.Mult2&quot;);&#xD;&#xA;double mult4=GetDouble(&quot;Formula.VecRot.Angle2Mult&quot;);&#xD;&#xA;double mult5=GetDouble(&quot;Formula.VecRot.Mult3&quot;);&#xD;&#xA;double mult6=GetDouble(&quot;Formula.VecRot.Angle3Mult&quot;);&#xD;&#xA;double power=GetDouble(&quot;Formula.VecRot.Power&quot;);&#xD;&#xA;int angleType1=(int) GetDouble(&quot;Formula.VecRot.Angle1Type&quot;);&#xD;&#xA;int angleType2=(int) GetDouble(&quot;Formula.VecRot.Angle2Type&quot;);&#xD;&#xA;int angleType3=(int) GetDouble(&quot;Formula.VecRot.Angle3Type&quot;);&#xD;&#xA;int angleRotationType1=(int) GetDouble(&quot;Formula.VecRot.Angle1Rot&quot;);&#xD;&#xA;int angleRotationType2=(int) GetDouble(&quot;Formula.VecRot.Angle2Rot&quot;);&#xD;&#xA;int angleRotationType3=(int) GetDouble(&quot;Formula.VecRot.Angle3Rot&quot;);&#xD;&#xA;&#xD;&#xA;   double phi = 0;&#xD;&#xA;       double phi2 = 0;&#xD;&#xA;       double phi3 = 0;&#xD;&#xA;&#xD;&#xA;  Fractrace.Geometry.Vec3 pos=null;&#xD;&#xA;            Fractrace.Geometry.Vec3 newPos= null;&#xD;&#xA;&#xD;&#xA;additionalPointInfo.red=0;&#xD;&#xA;additionalPointInfo.green=0;&#xD;&#xA;additionalPointInfo.blue=0;&#xD;&#xA;          for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// **********************************&#xD;&#xA;// 1. Rotation&#xD;&#xA;// *************************************&#xD;&#xA;&#xD;&#xA;        phi = Math.Atan2(y, x);&#xD;&#xA;       phi2 = Math.Atan2(y, z);&#xD;&#xA;     phi3 = Math.Atan2(z, x);&#xD;&#xA;&#xD;&#xA;if(mult2!=0) {&#xD;&#xA;&#xD;&#xA;switch(angleType1) {&#xD;&#xA;&#xD;&#xA;      case 0:&#xD;&#xA;            vecRot.x =1;&#xD;&#xA;            vecRot.y =0;&#xD;&#xA;            vecRot.z =0;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 1:&#xD;&#xA;            vecRot.x =0;&#xD;&#xA;            vecRot.y =1;&#xD;&#xA;            vecRot.z =0;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 2:&#xD;&#xA;            vecRot.x =0;&#xD;&#xA;            vecRot.y =0;&#xD;&#xA;            vecRot.z =1;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 3:&#xD;&#xA;            vecRot.y = -Math.Sin(mult1*phi2);&#xD;&#xA;            vecRot.x = 0;&#xD;&#xA;            vecRot.z =-Math.Cos(mult1*phi2);&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;      case 4:&#xD;&#xA;            vecRot.x =-Math.Sin(mult1*phi);&#xD;&#xA;            vecRot.y =-Math.Cos(mult1*phi);&#xD;&#xA;            vecRot.z = 0;&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;      case 5:&#xD;&#xA;            vecRot.y = 0;&#xD;&#xA;            vecRot.x = -Math.Sin(mult1*phi3);;&#xD;&#xA;            vecRot.z =-Math.Cos(mult1*phi3);&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;switch (angleRotationType1) {&#xD;&#xA;case 0:&#xD;&#xA;  vecRot.angle =0;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 1:&#xD;&#xA;  vecRot.angle =mult2*phi;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 2:&#xD;&#xA;  vecRot.angle =mult2*phi2;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 3:&#xD;&#xA;  vecRot.angle =mult2*phi3;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;       &#xD;&#xA;            vecRot.Normalize();&#xD;&#xA;            pos=new Fractrace.Geometry.Vec3(x,y,z);&#xD;&#xA;            newPos= vecRot.getTransform(pos);&#xD;&#xA;            x = newPos.X;&#xD;&#xA;            y = newPos.Y;&#xD;&#xA;            z = newPos.Z;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;r=1;&#xD;&#xA;&#xD;&#xA;if(power==0) {&#xD;&#xA;  r=1;&#xD;&#xA;}&#xD;&#xA;else if(power==0.5) {&#xD;&#xA;  r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;}&#xD;&#xA;else if(power==1) {&#xD;&#xA;  r=xx+yy+zz;&#xD;&#xA;} else {&#xD;&#xA;r=Math.Pow(xx+yy+zz,power);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  x *= r;&#xD;&#xA;            y *= r;&#xD;&#xA;            z *= r;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// *********************************&#xD;&#xA;// 2. Rotation&#xD;&#xA;// *************************************&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if(mult4!=0) {&#xD;&#xA;&#xD;&#xA;            phi = Math.Atan2(z, x);&#xD;&#xA;       phi2 = Math.Atan2(z, y);&#xD;&#xA;    phi3 = Math.Atan2(z, x);&#xD;&#xA;&#xD;&#xA;switch(angleType1) {&#xD;&#xA;&#xD;&#xA;      case 0:&#xD;&#xA;            vecRot.x =1;&#xD;&#xA;            vecRot.y =0;&#xD;&#xA;            vecRot.z =0;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 1:&#xD;&#xA;            vecRot.x =0;&#xD;&#xA;            vecRot.y =1;&#xD;&#xA;            vecRot.z =0;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 2:&#xD;&#xA;            vecRot.x =0;&#xD;&#xA;            vecRot.y =0;&#xD;&#xA;            vecRot.z =1;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 3:&#xD;&#xA;            vecRot.y = -Math.Sin(mult3*phi2);&#xD;&#xA;            vecRot.x = 0;&#xD;&#xA;            vecRot.z =-Math.Cos(mult3*phi2);&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;      case 4:&#xD;&#xA;            vecRot.x =-Math.Sin(mult3*phi);&#xD;&#xA;            vecRot.y =-Math.Cos(mult3*phi);&#xD;&#xA;            vecRot.z = 0;&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;      case 5:&#xD;&#xA;            vecRot.y = 0;&#xD;&#xA;            vecRot.x = -Math.Sin(mult3*phi3);;&#xD;&#xA;            vecRot.z =-Math.Cos(mult3*phi3);&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;switch (angleRotationType1) {&#xD;&#xA;case 0:&#xD;&#xA;  vecRot.angle =0;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 1:&#xD;&#xA;  vecRot.angle =mult4*phi;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 2:&#xD;&#xA;  vecRot.angle =mult4*phi2;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 3:&#xD;&#xA;  vecRot.angle =mult4*phi3;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            vecRot.Normalize();&#xD;&#xA;            pos=new Fractrace.Geometry.Vec3(x,y,z);&#xD;&#xA;             newPos= vecRot.getTransform(pos);&#xD;&#xA;            x = newPos.X;&#xD;&#xA;            y = newPos.Y;&#xD;&#xA;            z = newPos.Z;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;r=1;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if(power==0) {&#xD;&#xA;  r=1;&#xD;&#xA;}&#xD;&#xA;else if(power==0.5) {&#xD;&#xA;  r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;}&#xD;&#xA;else if(power==1) {&#xD;&#xA;  r=xx+yy+zz;&#xD;&#xA;} else {&#xD;&#xA;r=Math.Pow(xx+yy+zz,power);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;            x *= r;&#xD;&#xA;            y *= r;&#xD;&#xA;            z *= r;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// ***********************************&#xD;&#xA;// 3. Rotation&#xD;&#xA;// ***********************************&#xD;&#xA;&#xD;&#xA;if(mult6!=0) {&#xD;&#xA;&#xD;&#xA;            phi = Math.Atan2(z, y);&#xD;&#xA;       phi2 = Math.Atan2(z, x);&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    phi3 = Math.Atan2(z, x);&#xD;&#xA;&#xD;&#xA;switch(angleType1) {&#xD;&#xA;&#xD;&#xA;      case 0:&#xD;&#xA;            vecRot.x =1;&#xD;&#xA;            vecRot.y =0;&#xD;&#xA;            vecRot.z =0;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 1:&#xD;&#xA;            vecRot.x =0;&#xD;&#xA;            vecRot.y =1;&#xD;&#xA;            vecRot.z =0;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 2:&#xD;&#xA;            vecRot.x =0;&#xD;&#xA;            vecRot.y =0;&#xD;&#xA;            vecRot.z =1;&#xD;&#xA;          break;&#xD;&#xA;&#xD;&#xA;      case 3:&#xD;&#xA;            vecRot.y = -Math.Sin(mult5*phi2);&#xD;&#xA;            vecRot.x = 0;&#xD;&#xA;            vecRot.z =-Math.Cos(mult5*phi2);&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;      case 4:&#xD;&#xA;            vecRot.x =-Math.Sin(mult5*phi);&#xD;&#xA;            vecRot.y =-Math.Cos(mult5*phi);&#xD;&#xA;            vecRot.z = 0;&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;      case 5:&#xD;&#xA;            vecRot.y = 0;&#xD;&#xA;            vecRot.x = -Math.Sin(mult5*phi3);;&#xD;&#xA;            vecRot.z =-Math.Cos(mult5*phi3);&#xD;&#xA;      break;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;switch (angleRotationType1) {&#xD;&#xA;case 0:&#xD;&#xA;  vecRot.angle =0;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 1:&#xD;&#xA;  vecRot.angle =mult6*phi;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 2:&#xD;&#xA;  vecRot.angle =mult6*phi2;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;case 3:&#xD;&#xA;  vecRot.angle =mult6*phi3;&#xD;&#xA;break;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            vecRot.Normalize();&#xD;&#xA;            pos=new Fractrace.Geometry.Vec3(x,y,z);&#xD;&#xA;             newPos= vecRot.getTransform(pos);&#xD;&#xA;            x = newPos.X;&#xD;&#xA;            y = newPos.Y;&#xD;&#xA;            z = newPos.Z;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;&#xD;&#xA;r=1;&#xD;&#xA;if(power==0) {&#xD;&#xA;  r=1;&#xD;&#xA;}&#xD;&#xA;else if(power==0.5) {&#xD;&#xA;  r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;}&#xD;&#xA;else if(power==1) {&#xD;&#xA;  r=xx+yy+zz;&#xD;&#xA;} else {&#xD;&#xA;r=Math.Pow(xx+yy+zz,power);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;   x *= r;&#xD;&#xA;            y *= r;&#xD;&#xA;            z *= r;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Rotation ends:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            y += bj;&#xD;&#xA;            x += br;&#xD;&#xA;            z += bi;&#xD;&#xA;&#xD;&#xA;if(r!=0) {&#xD;&#xA;additionalPointInfo.red+=xx/r;&#xD;&#xA;additionalPointInfo.green+=yy/r;&#xD;&#xA;additionalPointInfo.blue+=zz/r;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            if (r &gt; gr) {&#xD;&#xA;              tw = n; break;&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Switch inner and outer view&#xD;&#xA;          if (invers) {&#xD;&#xA;            if (tw == 0)&#xD;&#xA;              tw = 1;&#xD;&#xA;            else&#xD;&#xA;              tw = 0;&#xD;&#xA;          }&#xD;&#xA;          return (tw);&#xD;&#xA;        }&#xD;&#xA;" />
  <Entry Key="test2" Value="df" />
  <Entry Key="Transformation.3.AngleX" Value="0" />
  <Entry Key="Transformation.3.AngleY" Value="0" />
  <Entry Key="Transformation.3.AngleZ" Value="0" />
  <Entry Key="Transformation.3.CenterX" Value="0" />
  <Entry Key="Transformation.3.CenterY" Value="0" />
  <Entry Key="Transformation.3.CenterZ" Value="0" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.ClassicView" Value="0" />
  <Entry Key="View.Deph" Value="1800" />
  <Entry Key="View.DephAdd" Value="0" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.PosterX" Value="0" />
  <Entry Key="View.PosterZ" Value="0" />
  <Entry Key="View.Raster" Value="2" />
  <Entry Key="View.Size" Value="1" />
  <Entry Key="View.Width" Value="1200" />
  <Entry Key="View.Zoom" Value="1" />
</ParameterDict>
<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="1.11363934183171" />
  <Entry Key="Border.Max.y" Value="1.03264922111264" />
  <Entry Key="Border.Max.z" Value="0.894255024902365" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-1.074586099284" />
  <Entry Key="Border.Min.y" Value="-1.15557622000307" />
  <Entry Key="Border.Min.z" Value="-1.29397041621334" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="40" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0.23" />
  <Entry Key="Formula.Static.jy" Value="0.4" />
  <Entry Key="Formula.Static.jz" Value="0.008" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="int gr=20;&#xA;&#xA;/// &lt;summary&gt;&#xA;        /// Initialisierung&#xA;        /// &lt;/summary&gt;&#xA;        public override void Init() {&#xA;            base.Init();&#xA;additionalPointInfo=new AdditionalPointInfo();&#xA;        }&#xA;&#xA;&#xA;&#xA;     public override long InSet(double ar, double ai, double aj, double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;&#xA;// Surface Coloring&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;     &#xA;     double xx, yy, zz;&#xA;          long tw;&#xA;          int n;&#xA;          double x = ar, y = ai, z = aj;&#xA;          double r_n = 0;&#xA;          xx = x * x; yy = y * y; zz = z * z;&#xA;          tw = 0;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xA;          Fractrace.Geometry.VecRotation vecRot = new Fractrace.Geometry.VecRotation();&#xA;          for (n = 1; n &lt; zkl; n++) {&#xA;&#xA;            double r_xy = Math.Sqrt(xx + yy);&#xA;            double theta = Math.Atan2(Math.Sqrt(xx + yy), z);&#xA;            double phi = Math.Atan2(y, x);&#xA;&#xA;// Für die erste Rotation werden Quaternionen benutzt&#xA;// Erste Rotation&#xA;&#xA;            vecRot.x = 0;&#xA;            vecRot.y =0;&#xA;            vecRot.z =1;&#xA;            vecRot.angle = phi;&#xA;            vecRot.Normalize();&#xA;            Fractrace.Geometry.Vec3 pos=new Fractrace.Geometry.Vec3(x,y,z);&#xA;            Fractrace.Geometry.Vec3 newPos= vecRot.getTransform(pos);&#xA;            x = newPos.X;&#xA;            y = newPos.Y;&#xA;            z = newPos.Z;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xA;     &#xA;/*&#xA;       x *= r;&#xA;            y *= r;&#xA;            z *= r;&#xA;&#xA;            y += bj;&#xA;            x += br;&#xA;            z += bi;&#xA;*/&#xA;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xA;            r_xy = Math.Sqrt(xx + yy);&#xA;            theta = Math.Atan2(Math.Sqrt(xx + yy), z);&#xA;            phi = Math.Atan2(y, x);&#xA;&#xA;&#xA;&#xA;// Zweite&#xA;            vecRot.x = 1;&#xA;            vecRot.y =1;&#xA;            vecRot.z =0;&#xA;            vecRot.angle = theta;&#xA;            vecRot.Normalize();&#xA;            Fractrace.Geometry.Vec3 pos2=new Fractrace.Geometry.Vec3(x,y,z);&#xA;            Fractrace.Geometry.Vec3 newPos2= vecRot.getTransform(pos2);&#xA;            x = newPos2.X;&#xA;            y = newPos2.Y;&#xA;            z = newPos2.Z;&#xA;            xx = x * x; yy = y * y; zz = z * z;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xA;            x *= r;&#xA;            y *= r;&#xA;            z *= r;&#xA;            y += bj;&#xA;            x += br;&#xA;            z += bi;&#xA;&#xA;            xx = x * x; yy = y * y; zz = z * z;&#xA;  additionalPointInfo.red=xx;&#xA;  additionalPointInfo.green=yy;&#xA;  additionalPointInfo.blue=zz;&#xA;&#xA;            if (r &gt; gr) {&#xA;              tw = n; break;&#xA;            }&#xA;          }&#xA;&#xA;// Hier könnte die zweite Rotation hin&#xA;&#xA;// Hinzugefügt, um bei der Ansicht von innen nur den Kern zu zeirgrn. &#xA;          if (invers) {&#xA;            if (tw == 0)&#xA;              tw = 1;&#xA;            else&#xA;              tw = 0;&#xA;          }&#xA;          return (tw);&#xA;        }&#xA;" />
  <Entry Key="Transformation.3.AngleX" Value="0" />
  <Entry Key="Transformation.3.AngleY" Value="0" />
  <Entry Key="Transformation.3.AngleZ" Value="0" />
  <Entry Key="Transformation.3.CenterX" Value="0" />
  <Entry Key="Transformation.3.CenterY" Value="0" />
  <Entry Key="Transformation.3.CenterZ" Value="0" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="-0.751580281891114" />
  <Entry Key="Border.Max.y" Value="0.00066314114659439" />
  <Entry Key="Border.Max.z" Value="0.68740511960063" />
  <Entry Key="Border.Min.x" Value="-0.754746023077433" />
  <Entry Key="Border.Min.y" Value="-0.00250260003972481" />
  <Entry Key="Border.Min.z" Value="0.684239378414311" />
  <Entry Key="Formula.Static.Cycles" Value="32" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0.0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="int gr=20;&#xA;  public override void Init() {&#xA;            base.Init();&#xA;           additionalPointInfo=new AdditionalPointInfo();&#xA;  }&#xA;&#xA;&#xA;     public override long InSet(double ar, double ai, double aj, double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;&#xA;          double xx, yy, zz;&#xA;          long tw;&#xA;          int n;&#xA;          double x = ar, y = ai, z = aj;&#xA;&#xA;          xx = x * x; yy = y * y; zz = z * z;&#xA;          tw = 0;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xA;          Fractrace.Geometry.VecRotation vecRot = new Fractrace.Geometry.VecRotation();&#xA;&#xA;additionalPointInfo.red=0;&#xA;additionalPointInfo.green=0;&#xA;additionalPointInfo.blue=0;&#xA;          for (n = 1; n &lt; zkl; n++) {&#xA;&#xA;// 1. Rotation&#xA;&#xA;            double phi = Math.Atan2(x, z);&#xA;       double phi2 = Math.Atan2(y, x);&#xA;&#xA;double mult=-8;&#xA;double mult2=10;&#xA;            vecRot.x =-Math.Cos(mult*phi2);&#xA;            vecRot.y = Math.Sin(mult*phi2);&#xA;            vecRot.z =0;&#xA;           &#xA;&#xA;            vecRot.angle =mult2*phi;&#xA;            vecRot.Normalize();&#xA;            Fractrace.Geometry.Vec3 pos=new Fractrace.Geometry.Vec3(x,y,z);&#xA;            Fractrace.Geometry.Vec3 newPos= vecRot.getTransform(pos);&#xA;            x = newPos.X;&#xA;            y = newPos.Y;&#xA;            z = newPos.Z;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xA;//            r = Math.Sqrt(xx + yy + zz);&#xA;r=xx+yy+zz;&#xA;r*=r;&#xA;  x *= r;&#xA;            y *= r;&#xA;            z *= r;&#xA;// 2. Rotation&#xA;&#xA;&#xA;/*&#xA;            phi = Math.Atan2(y, x);&#xA;       phi2 = Math.Atan2(z, y);&#xA;&#xA;mult=2;&#xA;            vecRot.x = -Math.Sin(mult*phi2);&#xA;            vecRot.z =0;&#xA;            vecRot.y =-Math.Cos(mult*phi2);&#xA;&#xA;            vecRot.angle =2.0*phi;&#xA;            vecRot.Normalize();&#xA;            pos=new Fractrace.Geometry.Vec3(x,y,z);&#xA;             newPos= vecRot.getTransform(pos);&#xA;            x = newPos.X;&#xA;            y = newPos.Y;&#xA;            z = newPos.Z;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xA;       //     r = Math.Sqrt(xx + yy + zz);&#xA;r=xx+yy+zz;&#xA;&#xA;//r*=r;&#xA;&#xA;*/&#xA;&#xA;&#xA;//r*=r;&#xA;if(r!=0 &amp;&amp; n&gt;3 &amp;&amp; n&lt;9) {&#xA;additionalPointInfo.red+=xx/r;&#xA;additionalPointInfo.green+=yy/r;&#xA;additionalPointInfo.blue+=zz/r;&#xA;}&#xA;&#xA;r*=r;&#xA;&#xA;if(r!=0 &amp;&amp; n&gt;9 &amp;&amp; n&lt;117) {&#xA;additionalPointInfo.red+=xx/r;&#xA;additionalPointInfo.green+=yy/r;&#xA;additionalPointInfo.blue+=zz/r;&#xA;}&#xA;&#xA;&#xA;            x *= r;&#xA;            y *= r;&#xA;            z *= r;&#xA;            y += bj;&#xA;            x += br;&#xA;            z += bi;&#xA;&#xA;            if (r &gt; gr) {&#xA;              tw = n; break;&#xA;            }&#xA;          }&#xA;&#xA;&#xA;// Switch inner and outer view&#xA;          if (invers) {&#xA;            if (tw == 0)&#xA;              tw = 1;&#xA;            else&#xA;              tw = 0;&#xA;          }&#xA;          return (tw);&#xA;        }&#xA;" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.AngleX" Value="90" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
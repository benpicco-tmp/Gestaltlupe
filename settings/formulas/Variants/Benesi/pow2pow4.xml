<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="80" />
  <Entry Key="Border.Max.x" Value="1.47981055281773" />
  <Entry Key="Border.Max.y" Value="1.95880787296205" />
  <Entry Key="Border.Max.z" Value="1.47981055281773" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-1.47981055281773" />
  <Entry Key="Border.Min.y" Value="-1.54889121519856" />
  <Entry Key="Border.Min.z" Value="-1.47981055281773" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Composite.AmbientLight" Value="0" />
  <Entry Key="Composite.BackgoundDarken" Value="0" />
  <Entry Key="Composite.Blurring" Value="0" />
  <Entry Key="Composite.BlurringDeph" Value="0" />
  <Entry Key="Composite.Color1Factor" Value="50" />
  <Entry Key="Composite.Color1TestArea" Value="10" />
  <Entry Key="Composite.FrontLight" Value="1" />
  <Entry Key="Composite.Normalize" Value="1" />
  <Entry Key="Composite.Renderer" Value="4" />
  <Entry Key="Composite.Renderer.Universal.ComicStyle" Value="1" />
  <Entry Key="Composite.Renderer.Universal.UseAmbient" Value="1" />
  <Entry Key="Composite.Renderer.Universal.UseColorFromFormula" Value="1" />
  <Entry Key="Composite.Renderer.Universal.UseDarken" Value="1" />
  <Entry Key="Composite.Renderer.Universal.UseMedianColorFromFormula" Value="1" />
  <Entry Key="Composite.Shininess" Value="2" />
  <Entry Key="Composite.UseAmbient" Value="1" />
  <Entry Key="Composite.UseColor1" Value="0" />
  <Entry Key="Composite.UseDarken" Value="1" />
  <Entry Key="Composite.UseDerivation" Value="1" />
  <Entry Key="Composite.UseMedian" Value="0" />
  <Entry Key="Computation.NoOfThreads" Value="8" />
  <Entry Key="Formula.Mandelbulb.Pow1" Value="8" />
  <Entry Key="Formula.Mandelbulb.Pow2" Value="8" />
  <Entry Key="Formula.Mandelbulb.Pow3" Value="8" />
  <Entry Key="Formula.Static.Cycles" Value="9" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="21" />
  <Entry Key="Intern.Formula.Source" Value="        public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;           additionalPointInfo=new AdditionalPointInfo();&#xD;&#xA;           //Set(&quot;Formula.BenesiMandelbulb.TestPara&quot;,8);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Bailout&#xD;&#xA; double gr=20;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// No idea, what flip is :-(&#xD;&#xA;public double flip(double r) {&#xD;&#xA;//return r;&#xD;&#xA;return abs(r);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double abs(double r) {&#xD;&#xA;if(r&lt;0)&#xD;&#xA;return -r;&#xD;&#xA;return r;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double sqrt(double r) {&#xD;&#xA;return Math.Sqrt(r);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double sin(double r) {&#xD;&#xA;return Math.Sin(r);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double atan2(double x,double y) {&#xD;&#xA;if(x==0 &amp;&amp; y==0)&#xD;&#xA;return 0;&#xD;&#xA;return Math.Atan2(x,y);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;        public override long InSet(double sx, double sy, double sz,  double cr, double ci, double cj, double additional, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;additionalPointInfo.red=0;&#xD;&#xA;additionalPointInfo.green=0;&#xD;&#xA;additionalPointInfo.blue=0;&#xD;&#xA;&#xD;&#xA;double szz=sz*sz;&#xD;&#xA;double syy=sy*sy;&#xD;&#xA;double sxx=sx*sx;&#xD;&#xA;double theta=0;&#xD;&#xA;double phi=0;&#xD;&#xA;double bail=sqrt(sxx+syy+szz);&#xD;&#xA;double r=bail;&#xD;&#xA;double v=4;&#xD;&#xA;int tw=0;  &#xD;&#xA;double pow=2;&#xD;&#xA;            for (int n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;double r2=Math.Pow(r, pow);&#xD;&#xA;theta=atan2(sx,flip(sqrt(sz*sz+sy*sy)));&#xD;&#xA;phi=atan2(sy,flip(sz));&#xD;&#xA;			&#xD;&#xA;double nx=r2*Math.Cos(v*theta);&#xD;&#xA;double ny=r2*sin(v*theta)*Math.Cos(v*phi);&#xD;&#xA;double nz=r2*sin(v*theta)*Math.Sin(v*phi);&#xD;&#xA;				&#xD;&#xA;	sx=nx+cr;&#xD;&#xA;	sy=ny+ci;&#xD;&#xA;	sz=nz+cj;&#xD;&#xA;&#xD;&#xA;szz=sz*sz;syy=sy*sy;sxx=sx*sx; &#xD;&#xA;&#xD;&#xA;//z=quaternion(sx,sy,sz,0);&#xD;&#xA;r=bail=sqrt(sxx+syy+szz);&#xD;&#xA;&#xD;&#xA;if(n&gt;2) {&#xD;&#xA;additionalPointInfo.red+=abs(sx)/bail;&#xD;&#xA;additionalPointInfo.green+=abs(sy)/bail;&#xD;&#xA;additionalPointInfo.blue+=abs(sz)/bail;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;                if (bail &gt; gr) { tw = n; break; }&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (invers) {&#xD;&#xA;                if (tw == 0)&#xD;&#xA;                    tw = 1;&#xD;&#xA;                else&#xD;&#xA;                    tw = 0;&#xD;&#xA;            }&#xD;&#xA;            return (tw);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" />
  <Entry Key="test2" Value="df" />
  <Entry Key="Transformation.3.AngleX" Value="0" />
  <Entry Key="Transformation.3.AngleY" Value="0" />
  <Entry Key="Transformation.3.AngleZ" Value="0" />
  <Entry Key="Transformation.3.CenterX" Value="0" />
  <Entry Key="Transformation.3.CenterY" Value="0" />
  <Entry Key="Transformation.3.CenterZ" Value="0" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.ClassicView" Value="0" />
  <Entry Key="View.Deph" Value="2100" />
  <Entry Key="View.Height" Value="720" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.PosterX" Value="0" />
  <Entry Key="View.PosterZ" Value="0" />
  <Entry Key="View.Raster" Value="2" />
  <Entry Key="View.Size" Value="1" />
  <Entry Key="View.Width" Value="1280" />
  <Entry Key="View.Zoom" Value="1" />
</ParameterDict>
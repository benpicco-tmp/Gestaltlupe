<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="300" />
  <Entry Key="Border.Max.x" Value="1.67191085159565" />
  <Entry Key="Border.Max.y" Value="3.1695211148559" />
  <Entry Key="Border.Max.z" Value="0.824211170828816" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-0.274612945943027" />
  <Entry Key="Border.Min.y" Value="0.862529947402992" />
  <Entry Key="Border.Min.z" Value="-2.09557452547898" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Composite.AmbientLight" Value="0" />
  <Entry Key="Composite.BackgoundDarken" Value="0" />
  <Entry Key="Composite.Blurring" Value="0" />
  <Entry Key="Composite.BlurringDeph" Value="0" />
  <Entry Key="Composite.Color1Factor" Value="50" />
  <Entry Key="Composite.Color1TestArea" Value="10" />
  <Entry Key="Composite.FrontLight" Value="1" />
  <Entry Key="Composite.Normalize" Value="1" />
  <Entry Key="Composite.Renderer" Value="4" />
  <Entry Key="Composite.Shininess" Value="2" />
  <Entry Key="Composite.UseAmbient" Value="1" />
  <Entry Key="Composite.UseColor1" Value="0" />
  <Entry Key="Composite.UseDarken" Value="1" />
  <Entry Key="Composite.UseDerivation" Value="1" />
  <Entry Key="Composite.UseMedian" Value="1" />
  <Entry Key="Computation.NoOfThreads" Value="8" />
  <Entry Key="Formula.Static.Cycles" Value="200" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0.95" />
  <Entry Key="Formula.Static.jy" Value="0.402" />
  <Entry Key="Formula.Static.jz" Value="-0.468" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="/// &lt;summary&gt;&#xD;&#xA;        /// Initialisierung&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xD;&#xA;additionalPointInfo=new AdditionalPointInfo();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Mandelbox&#xD;&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;double gr=42.5;&#xD;&#xA;double xx, yy, zz;&#xD;&#xA;          long tw;&#xD;&#xA;          int n;&#xD;&#xA;          double x=ar,y=ai,z=aj;&#xD;&#xA;          double r_n = 0;&#xD;&#xA;&#xD;&#xA;          xx = x * x; yy = y * y; zz = z * z; &#xD;&#xA;          tw = 0L;&#xD;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;  double scale = -1.79;&#xD;&#xA;//  double scale = 3.1415;&#xD;&#xA;// double scale = -3.05;&#xD;&#xA;&#xD;&#xA;int xcount=0;&#xD;&#xA;int ycount=0;&#xD;&#xA;int zcount=0;&#xD;&#xA;&#xD;&#xA;          for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;//              ; fold box onto itself  &#xD;&#xA;              if (x &gt; 1) {&#xD;&#xA;                x = 2.0 - x;&#xD;&#xA;xcount++;&#xD;&#xA;}&#xD;&#xA;              else if (x &lt; -1) {&#xD;&#xA;                x = -2.0 - x;&#xD;&#xA;xcount++;&#xD;&#xA;}&#xD;&#xA;             &#xD;&#xA;              if (y &gt; 1) {&#xD;&#xA;                y = 2.0 - y;&#xD;&#xA;ycount++;&#xD;&#xA;}&#xD;&#xA;              else if (y &lt; -1) {&#xD;&#xA;                y = -2.0 - y;&#xD;&#xA;ycount++;&#xD;&#xA;}&#xD;&#xA;             &#xD;&#xA;              if (z &gt; 1) {&#xD;&#xA;                z = 2.0 - z;&#xD;&#xA;zcount++;&#xD;&#xA;}&#xD;&#xA;              else if (z &lt; -1) {&#xD;&#xA;                z = -2.0 - z;&#xD;&#xA;zcount++;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;              &#xD;&#xA;            //  ; fold sphere onto itself&#xD;&#xA;              double fixedRadius = 1.0;&#xD;&#xA;              double minRadius = 0.9;&#xD;&#xA;      double length=   r = Math.Sqrt(x*x + y*y + z*z);&#xD;&#xA;&#xD;&#xA;   double mult=1;&#xD;&#xA;&#xD;&#xA;    if (length &lt; minRadius) {&#xD;&#xA;        mult=Math.Sqrt(fixedRadius)/Math.Sqrt(minRadius);&#xD;&#xA;    }   else if (length &lt; fixedRadius) {&#xD;&#xA;        mult=Math.Sqrt(fixedRadius)/Math.Sqrt(length);&#xD;&#xA;  }&#xD;&#xA;   mult*=scale;&#xD;&#xA;   x*=mult;&#xD;&#xA;   y*=mult;&#xD;&#xA;   z*=mult;&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;      length=   r = Math.Sqrt(x*x + y*y + z*z);&#xD;&#xA; x+=br;&#xD;&#xA;   y+=bi;&#xD;&#xA;   z+=bj;&#xD;&#xA;       if (length &gt; gr) { &#xD;&#xA;              tw = n; break; &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;          if (invers) {&#xD;&#xA;            if (tw == 0)&#xD;&#xA;              tw = 1;&#xD;&#xA;            else&#xD;&#xA;              tw = 0;&#xD;&#xA;          }&#xD;&#xA;          return (tw);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;" />
  <Entry Key="test2" Value="df" />
  <Entry Key="Transformation.3.AngleX" Value="0" />
  <Entry Key="Transformation.3.AngleY" Value="0" />
  <Entry Key="Transformation.3.AngleZ" Value="0" />
  <Entry Key="Transformation.3.CenterX" Value="0" />
  <Entry Key="Transformation.3.CenterY" Value="0" />
  <Entry Key="Transformation.3.CenterZ" Value="0" />
  <Entry Key="Transformation.AngleX" Value="45" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="45" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="View.ClassicView" Value="0" />
  <Entry Key="View.Deph" Value="1800" />
  <Entry Key="View.Height" Value="720" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.PosterX" Value="0" />
  <Entry Key="View.PosterZ" Value="0" />
  <Entry Key="View.Raster" Value="2" />
  <Entry Key="View.Size" Value="1" />
  <Entry Key="View.Width" Value="1280" />
  <Entry Key="View.Zoom" Value="1" />
</ParameterDict>
<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="300" />
  <Entry Key="Border.Max.x" Value="0.619035480263407" />
  <Entry Key="Border.Max.y" Value="0" />
  <Entry Key="Border.Max.z" Value="0.841606123727748" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-1.38602560710723" />
  <Entry Key="Border.Min.y" Value="-1.49" />
  <Entry Key="Border.Min.z" Value="-0.823180748192179" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Composite.AmbientLight" Value="0" />
  <Entry Key="Composite.BackgoundDarken" Value="0" />
  <Entry Key="Composite.Blurring" Value="0" />
  <Entry Key="Composite.BlurringDeph" Value="0" />
  <Entry Key="Composite.FrontLight" Value="1" />
  <Entry Key="Composite.Shininess" Value="2" />
  <Entry Key="Composite.UseAmbient" Value="1" />
  <Entry Key="Composite.UseDarken" Value="1" />
  <Entry Key="Composite.UseDerivation" Value="1" />
  <Entry Key="Composite.UseMedian" Value="1" />
  <Entry Key="Computation.NoOfThreads" Value="8" />
  <Entry Key="Formula.Static.Cycles" Value="14" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="/// &lt;summary&gt;&#xD;&#xA;        /// Initialisierung&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xD;&#xA;gr=10;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;double gr=10;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;double ak=0;&#xD;&#xA;&#xD;&#xA; double aar, aai, aaj, aak, arj, ark;&#xD;&#xA;            long tw;&#xD;&#xA;            int n;&#xD;&#xA;&#xD;&#xA;            aar = ar * ar; aai = ai * ai; aaj = aj * aj; aak = ak * ak; tw = 0L;&#xD;&#xA;double d=aar + aai + aaj + aak;&#xD;&#xA;            for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;                ai = 2.0* ar * ai + bi;&#xD;&#xA;                aj = 2.0* ar * aj + bj;&#xD;&#xA;                ak =  2.0* ar * ak + bj;&#xD;&#xA;                ar =aar - aai - aaj - aak + br;&#xD;&#xA;                aar = ar * ar; aai = ai * ai; aaj = aj * aj; aak = ak * ak;&#xD;&#xA;               d=aar + aai + aaj + aak;&#xD;&#xA;                if (d &gt; gr) { tw = n; break; }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (invers) {&#xD;&#xA;                if (tw == 0)&#xD;&#xA;                    tw = 1;&#xD;&#xA;                else&#xD;&#xA;                    tw = 0;&#xD;&#xA;            }&#xD;&#xA;            return (tw);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" />
  <Entry Key="test2" Value="df" />
  <Entry Key="Transformation.3.AngleX" Value="0" />
  <Entry Key="Transformation.3.AngleY" Value="0" />
  <Entry Key="Transformation.3.AngleZ" Value="0" />
  <Entry Key="Transformation.3.CenterX" Value="0" />
  <Entry Key="Transformation.3.CenterY" Value="0" />
  <Entry Key="Transformation.3.CenterZ" Value="0" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="View.ClassicView" Value="0" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Raster" Value="2" />
  <Entry Key="View.Size" Value="1" />
  <Entry Key="View.Zoom" Value="1" />
</ParameterDict>
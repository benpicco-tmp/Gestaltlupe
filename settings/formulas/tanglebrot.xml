<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="0.444444444444445" />
  <Entry Key="Border.Max.y" Value="1.18518518518519" />
  <Entry Key="Border.Max.z" Value="0.888888888888889" />
  <Entry Key="Border.Min.x" Value="-0.444444444444445" />
  <Entry Key="Border.Min.y" Value="0.296296296296296" />
  <Entry Key="Border.Min.z" Value="-6.66133814775094E-16" />
  <Entry Key="Formula.Static.Cycles" Value="33" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0.2" />
  <Entry Key="Formula.Static.jy" Value="0.4" />
  <Entry Key="Formula.Static.jz" Value="0.5" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="&#xA;public override void Init() { &#xA;  base.Init();&#xA;  additionalPointInfo=new AdditionalPointInfo();&#xA;  gr1=GetDouble(&quot;Formula.Static.Cycles&quot;);&#xA;  int tempGr=(int)gr1;&#xA;  gr1=gr1- tempGr;&#xA;  gr1=1-gr1;&#xA;  gr1*=2.4;&#xA;}&#xA;&#xA;double gr1=0;&#xA;&#xA;public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;  double aar, aai, aaj;&#xA;  long tw;&#xA;  int n;&#xA;  int pow = 8; // n=8 default Mandelbulb&#xA;  double gr =Math.Pow(10,gr1)+1.0;  // Bailout&#xA;  double theta, phi;&#xA;  double r_n = 0;&#xA;  aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xA;  tw = 0L;&#xA;  double r = Math.Sqrt(aar + aai + aaj);&#xA;  double  phi_pow,theta_pow,sin_theta_pow,rn_sin_theta_pow;&#xA;&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;&#xA;double x=ar;&#xA;double y=ai;&#xA;double z=aj;&#xA;double xx=x*x;&#xA;double yy=y*y;&#xA;double zz=z*z;&#xA;double x1=0,y1=0,z1=0;&#xA;&#xA;  for (n = 1; n &lt; zkl; n++) {&#xA;    xx=x*x;yy=y*y;zz=z*z; &#xA;    r=xx+yy+zz;&#xA;if(r&gt;0.01) {&#xA;  y=2*x*y;&#xA;  x=xx-yy;&#xA;  z=-2.0*z*Math.Sqrt(xx+yy+0.5*zz);&#xA;  x+=br;y+=bi;z+=bj;&#xA;} else&#xA;{&#xA;x1=3.0*z;&#xA;y1=3.0*y;&#xA;z1=3.0*y;&#xA;x=x1;y=y1;z=z1;&#xA;}&#xA;&#xA;r=xx+yy+zz;&#xA;&#xA;    additionalPointInfo.red+=xx/r;&#xA;    additionalPointInfo.green+=yy/r;&#xA;    additionalPointInfo.blue+=zz/r;&#xA;    if (r &gt; gr) { tw = n; break; }&#xA;  }&#xA;&#xA;  if (invers) {&#xA;     if (tw == 0)&#xA;        tw = 1;&#xA;      else&#xA;        tw = 0;&#xA;  }&#xA;  return (tw);&#xA;}&#xA;&#xA;&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="90" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.6" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
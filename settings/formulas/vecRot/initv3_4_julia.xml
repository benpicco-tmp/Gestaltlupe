<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="300" />
  <Entry Key="Border.Max.x" Value="1.05767264662766" />
  <Entry Key="Border.Max.y" Value="2" />
  <Entry Key="Border.Max.z" Value="0.894255024902365" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-1.01861940407995" />
  <Entry Key="Border.Min.y" Value="-1.39351851851853" />
  <Entry Key="Border.Min.z" Value="-1.29397041621334" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Composite.AmbientLight" Value="0" />
  <Entry Key="Composite.BackgoundDarken" Value="0" />
  <Entry Key="Composite.Blurring" Value="0" />
  <Entry Key="Composite.BlurringDeph" Value="0" />
  <Entry Key="Composite.Color1Factor" Value="50" />
  <Entry Key="Composite.Color1TestArea" Value="10" />
  <Entry Key="Composite.FrontLight" Value="1" />
  <Entry Key="Composite.Renderer" Value="FastScienceRenderer" />
  <Entry Key="Composite.Shininess" Value="2" />
  <Entry Key="Composite.UseAmbient" Value="1" />
  <Entry Key="Composite.UseColor1" Value="0" />
  <Entry Key="Composite.UseDarken" Value="1" />
  <Entry Key="Composite.UseDerivation" Value="1" />
  <Entry Key="Composite.UseMedian" Value="1" />
  <Entry Key="Computation.NoOfThreads" Value="8" />
  <Entry Key="Formula.Static.Cycles" Value="10" />
  <Entry Key="Formula.Static.Formula" Value="-2" />
  <Entry Key="Formula.Static.jx" Value="0.4" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="int gr=20;&#xD;&#xA;&#xD;&#xA;/// &lt;summary&gt;&#xD;&#xA;        /// Initialisierung&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     public override long InSet(double ar, double ai, double aj, double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;          double xx, yy, zz;&#xD;&#xA;          long tw;&#xD;&#xA;          int n;&#xD;&#xA;          double x = ar, y = ai, z = aj;&#xD;&#xA;          double r_n = 0;&#xD;&#xA;//y=bj;&#xD;&#xA;//z=bi;&#xD;&#xA;          xx = x * x; yy = y * y; zz = z * z;&#xD;&#xA;          tw = 0;&#xD;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;          Fractrace.Geometry.VecRotation vecRot = new Fractrace.Geometry.VecRotation();&#xD;&#xA;          for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;            double r_xy = Math.Sqrt(xx + yy);&#xD;&#xA;            double theta = Math.Atan2(Math.Sqrt(xx + yy), z);&#xD;&#xA;            double phi = Math.Atan2(y, x);&#xD;&#xA;&#xD;&#xA;// Für die erste Rotation werden Quaternionen benutzt&#xD;&#xA;// Erste Rotation&#xD;&#xA;/*&#xD;&#xA;double br1=bj;    // br1=0&#xD;&#xA;double bt1=bi;    // bt1=y;&#xD;&#xA;double bbr=br1*br1;  // bbr=0;&#xD;&#xA;double bbt=bt1*bt1;  // bbt=yy;&#xD;&#xA;bt1=2.0*bt1*br1;    // bt1=0;&#xD;&#xA;br1=bbr-bbt;     // br1=yy;&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;            vecRot.x = 0;&#xD;&#xA;            vecRot.y =0;&#xD;&#xA;            vecRot.z =1;&#xD;&#xA;            vecRot.angle = phi;&#xD;&#xA;            vecRot.Normalize();&#xD;&#xA;            Fractrace.Geometry.Vec3 pos=new Fractrace.Geometry.Vec3(x,y,z);&#xD;&#xA;            Fractrace.Geometry.Vec3 newPos= vecRot.getTransform(pos);&#xD;&#xA;            x = newPos.X;&#xD;&#xA;            y = newPos.Y;&#xD;&#xA;            z = newPos.Z;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xD;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;/*     &#xD;&#xA;       x *= r;&#xD;&#xA;            y *= r;&#xD;&#xA;            z *= r;&#xD;&#xA;            y += bj;&#xD;&#xA;            x += br;&#xD;&#xA;            z += bi;&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;// Zweite&#xD;&#xA;            vecRot.x = 0;&#xD;&#xA;            vecRot.y =1;&#xD;&#xA;            vecRot.z =0;&#xD;&#xA;            vecRot.angle = theta;&#xD;&#xA;            vecRot.Normalize();&#xD;&#xA;            Fractrace.Geometry.Vec3 pos2=new Fractrace.Geometry.Vec3(x,y,z);&#xD;&#xA;            Fractrace.Geometry.Vec3 newPos2= vecRot.getTransform(pos2);&#xD;&#xA;            x = newPos2.X;&#xD;&#xA;            y = newPos2.Y;&#xD;&#xA;            z = newPos2.Z;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xD;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;            x *= r;&#xD;&#xA;            y *= r;&#xD;&#xA;            z *= r;&#xD;&#xA;            y += bj;&#xD;&#xA;            x += br;&#xD;&#xA;            z += bi;&#xD;&#xA;&#xD;&#xA;            if (r &gt; gr) {&#xD;&#xA;              tw = n; break;&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;// Hier könnte die zweite Rotation hin&#xD;&#xA;&#xD;&#xA;// Hinzugefügt, um bei der Ansicht von innen nur den Kern zu zeirgrn. &#xD;&#xA;          if (invers) {&#xD;&#xA;            if (tw == 0)&#xD;&#xA;              tw = 1;&#xD;&#xA;            else&#xD;&#xA;              tw = 0;&#xD;&#xA;          }&#xD;&#xA;          return (tw);&#xD;&#xA;        }&#xD;&#xA;" />
  <Entry Key="test2" Value="df" />
  <Entry Key="Transformation.3.AngleX" Value="0" />
  <Entry Key="Transformation.3.AngleY" Value="0" />
  <Entry Key="Transformation.3.AngleZ" Value="0" />
  <Entry Key="Transformation.3.CenterX" Value="0" />
  <Entry Key="Transformation.3.CenterY" Value="0" />
  <Entry Key="Transformation.3.CenterZ" Value="0" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="View.ClassicView" Value="0" />
  <Entry Key="View.Deph" Value="800" />
  <Entry Key="View.Height" Value="480" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.PosterX" Value="0" />
  <Entry Key="View.PosterZ" Value="0" />
  <Entry Key="View.Raster" Value="2" />
  <Entry Key="View.Size" Value="1" />
  <Entry Key="View.Width" Value="640" />
  <Entry Key="View.Zoom" Value="1" />
</ParameterDict>
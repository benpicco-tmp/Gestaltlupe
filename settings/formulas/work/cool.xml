<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="300" />
  <Entry Key="Border.Max.x" Value="1.47650326015346" />
  <Entry Key="Border.Max.y" Value="1.6" />
  <Entry Key="Border.Max.z" Value="1.49973785629495" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-1.76939917666236" />
  <Entry Key="Border.Min.y" Value="-1.5" />
  <Entry Key="Border.Min.z" Value="-1.49973785629495" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Composite.AmbientLight" Value="0" />
  <Entry Key="Composite.BackgoundDarken" Value="0" />
  <Entry Key="Composite.Blurring" Value="0" />
  <Entry Key="Composite.BlurringDeph" Value="0" />
  <Entry Key="Composite.Color1Factor" Value="50" />
  <Entry Key="Composite.Color1TestArea" Value="10" />
  <Entry Key="Composite.FrontLight" Value="1" />
  <Entry Key="Composite.Normalize" Value="1" />
  <Entry Key="Composite.Renderer" Value="FastScienceRenderer" />
  <Entry Key="Composite.Shininess" Value="2" />
  <Entry Key="Composite.UseAmbient" Value="0" />
  <Entry Key="Composite.UseColor1" Value="0" />
  <Entry Key="Composite.UseDarken" Value="0" />
  <Entry Key="Composite.UseDerivation" Value="0" />
  <Entry Key="Composite.UseMedian" Value="0" />
  <Entry Key="Computation.NoOfThreads" Value="8" />
  <Entry Key="Formula.Static.Cycles" Value="7" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="/// &lt;summary&gt;&#xD;&#xA;        /// Initialisierung&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public override void Init() {&#xD;&#xA;            base.Init();&#xD;&#xA;            // Hier kann z.B. pow oder gr aus den Einstellungen gelesen werden.&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Pow 2- Variante ohne Winkelfunktionen&#xD;&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;//      public long InSet2(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;double gr=2;&#xD;&#xA;int pow = 2; // n=8 entspricht dem Mandelbulb&#xD;&#xA;double xx, yy, zz;&#xD;&#xA;          long tw;&#xD;&#xA;          int n;&#xD;&#xA;//          ai = 0; aj = 0; ak = 0;&#xD;&#xA;&#xD;&#xA;          double x=0,y=0,z=0;&#xD;&#xA;          double r_n = 0;&#xD;&#xA;&#xD;&#xA;          xx = x * x; yy = y * y; zz = z * z; &#xD;&#xA;          tw = 0L;&#xD;&#xA;          double r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;&#xD;&#xA;          for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;// begin Einschub&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            double r_xy_1=Math.Sqrt(zz+xx);&#xD;&#xA;            double a_1 = 1;&#xD;&#xA;            &#xD;&#xA;            if(r_xy_1!=0.0)&#xD;&#xA;             a_1= 1 - yy/ r_xy_1;&#xD;&#xA;&#xD;&#xA;            z=2 *x*z*a_1;&#xD;&#xA;            x = (xx - zz) * a_1;&#xD;&#xA;            y = 2 * y * r_xy_1;&#xD;&#xA;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xD;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;/*&#xD;&#xA;y/=r;&#xD;&#xA;x/=r;&#xD;&#xA;z/=r;&#xD;&#xA;*/&#xD;&#xA;/*&#xD;&#xA;          r_xy_1=Math.Sqrt(yy+xx);&#xD;&#xA;             a_1 = 1;&#xD;&#xA;            &#xD;&#xA;            if(r_xy_1!=0.0)&#xD;&#xA;             a_1= 1 - zz / r_xy_1;&#xD;&#xA;&#xD;&#xA;            y=2 *x*y*a_1;&#xD;&#xA;            x = (xx - yy) * a_1;&#xD;&#xA;            z = 2 * z * r_xy_1;&#xD;&#xA;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xD;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;// Ende Einschub&#xD;&#xA;            &#xD;&#xA;            double r_xy=Math.Sqrt(xx+yy);&#xD;&#xA;            double a = 1;&#xD;&#xA;            &#xD;&#xA;            if(r_xy!=0.0)&#xD;&#xA;             a= 1 - zz / r_xy;&#xD;&#xA;&#xD;&#xA;            y=2 *x*y*a+bj;&#xD;&#xA;            x = (xx - yy) * a+br;&#xD;&#xA;            z = 2 * z * r_xy+bi;&#xD;&#xA;&#xD;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xD;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xD;&#xA;            &#xD;&#xA;            if (r &gt; gr) { &#xD;&#xA;              tw = n; break; &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          if (invers) {&#xD;&#xA;            if (tw == 0)&#xD;&#xA;              tw = 1;&#xD;&#xA;            else&#xD;&#xA;              tw = 0;&#xD;&#xA;          }&#xD;&#xA;          return (tw);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Winkel-Variante&#xD;&#xA;        public long InSet2(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;//        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;&#xD;&#xA;            double aar, aai, aaj;&#xD;&#xA;            long tw;&#xD;&#xA;            int n;&#xD;&#xA;            double pow = 2.0; // n=8 entspricht dem Mandelbulb&#xD;&#xA;            double gr = 10; // Ab diesem Wert liegt mit Sicherheit Nichtzugehörigkeit zur Menge vor.&#xD;&#xA;            double theta, phi;&#xD;&#xA;&#xD;&#xA;            double r_n = 0;&#xD;&#xA;            aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xD;&#xA;            tw = 0L;&#xD;&#xA;            double r = Math.Sqrt(aar + aai + aaj);&#xD;&#xA;&#xD;&#xA;             double      phi_pow;&#xD;&#xA;             double       theta_pow;&#xD;&#xA;             double    sin_theta_pow;&#xD;&#xA;              double  rn_sin_theta_pow;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;&#xD;&#xA;           //     theta = Math.Atan2(Math.Sqrt(aar + aai), aj);&#xD;&#xA;                   theta = Math.Atan2(aj,Math.Sqrt(aar + aai));&#xD;&#xA;                phi = Math.Atan2(ai, ar);&#xD;&#xA;                r_n = Math.Pow(r, pow);&#xD;&#xA;&#xD;&#xA;                phi_pow=phi*pow;&#xD;&#xA;                theta_pow=theta*pow;&#xD;&#xA;                sin_theta_pow=Math.Sin(theta_pow);&#xD;&#xA;               rn_sin_theta_pow=r_n* sin_theta_pow;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;                ar =  rn_sin_theta_pow * Math.Cos(phi_pow)+br;&#xD;&#xA;                ai = rn_sin_theta_pow * Math.Sin(phi_pow)+bi;&#xD;&#xA;                aj = r_n * Math.Cos(theta_pow)+bj;&#xD;&#xA;&#xD;&#xA;                aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xD;&#xA;                r = Math.Sqrt(aar + aai + aaj);&#xD;&#xA;&#xD;&#xA;                if (r &gt; gr) { tw = n; break; }&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (invers) {&#xD;&#xA;                if (tw == 0)&#xD;&#xA;                    tw = 1;&#xD;&#xA;                else&#xD;&#xA;                    tw = 0;&#xD;&#xA;            }&#xD;&#xA;            return (tw);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;" />
  <Entry Key="test2" Value="df" />
  <Entry Key="Transformation.3.AngleX" Value="0" />
  <Entry Key="Transformation.3.AngleY" Value="0" />
  <Entry Key="Transformation.3.AngleZ" Value="0" />
  <Entry Key="Transformation.3.CenterX" Value="0" />
  <Entry Key="Transformation.3.CenterY" Value="0" />
  <Entry Key="Transformation.3.CenterZ" Value="0" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="View.ClassicView" Value="0" />
  <Entry Key="View.Deph" Value="800" />
  <Entry Key="View.Height" Value="480" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.PosterX" Value="0" />
  <Entry Key="View.PosterZ" Value="0" />
  <Entry Key="View.Raster" Value="2" />
  <Entry Key="View.Size" Value="2" />
  <Entry Key="View.Width" Value="640" />
  <Entry Key="View.Zoom" Value="1" />
</ParameterDict>
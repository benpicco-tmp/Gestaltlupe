<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="-116.764799063538" />
  <Entry Key="Border.Max.x.PARAMETERINFO.Description" Value="Maximal X-Value." />
  <Entry Key="Border.Max.y" Value="41.9955530227182" />
  <Entry Key="Border.Max.y.PARAMETERINFO.Description" Value="Maximal y-Value." />
  <Entry Key="Border.Max.z" Value="39.8229880965398" />
  <Entry Key="Border.Max.zz" Value="0" />
  <Entry Key="Border.Min.x" Value="-116.767552622599" />
  <Entry Key="Border.Min.x.PARAMETERINFO.Description" Value="Minimal X-Value." />
  <Entry Key="Border.Min.y" Value="41.992799463657" />
  <Entry Key="Border.Min.y.PARAMETERINFO.Description" Value="Minimal Y-Value." />
  <Entry Key="Border.Min.z" Value="39.8202345374786" />
  <Entry Key="Border.Min.z.PARAMETERINFO.Description" Value="Minimal Z-Value" />
  <Entry Key="Border.Min.zz" Value="0" />
  <Entry Key="Formula.Mandelbulb.Pow1" Value="2" />
  <Entry Key="Formula.Mandelbulb.Pow2" Value="2" />
  <Entry Key="Formula.Mandelbulb.Pow3" Value="2" />
  <Entry Key="Formula.Static.Cycles" Value="250" />
  <Entry Key="Formula.Static.Cycles.PARAMETERINFO.Description" Value="Number of iterations used in the formula." />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.Formula.PARAMETERINFO.Description" Value="-1: mandelbrot mode. -2: julia mode (Values from 1 to 26 corresponds to some inbuild formulas.)" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jx.PARAMETERINFO.Description" Value="X-component of the Julia Seed, if the formula is in julia mode. X-component of the start value , if the formula is in mandelbrot mode." />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jy.PARAMETERINFO.Description" Value="Y-component of the Julia Seed, if the formula is in julia mode. Y-component of the start value , if the formula is in mandelbrot mode." />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jz.PARAMETERINFO.Description" Value="Z-component of the Julia Seed, if the formula is in julia mode. Z-component of the start value , if the formula is in mandelbrot mode." />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.jzz.PARAMETERINFO.Description" Value="Q-component of the Julia Seed, if the formula is in julia mode." />
  <Entry Key="Formula.Static.MinCycle" Value="250" />
  <Entry Key="Formula.Static.MinCycle.PARAMETERINFO.Description" Value="Number of iterations used in the formula, if the inside of the 3D object is rendered." />
  <Entry Key="Formula.VecRot.Angle1Mult" Value="" />
  <Entry Key="Formula.VecRot.Angle1Rot" Value="" />
  <Entry Key="Formula.VecRot.Angle1Type" Value="" />
  <Entry Key="Formula.VecRot.Angle2Mul" Value="" />
  <Entry Key="Formula.VecRot.Angle2Mult" Value="" />
  <Entry Key="Formula.VecRot.Angle2Rot" Value="" />
  <Entry Key="Formula.VecRot.Angle2Type" Value="" />
  <Entry Key="Formula.VecRot.Angle3Mult" Value="" />
  <Entry Key="Formula.VecRot.Angle3Rot" Value="" />
  <Entry Key="Formula.VecRot.Angle3Type" Value="" />
  <Entry Key="Formula.VecRot.Mult1" Value="" />
  <Entry Key="Formula.VecRot.Mult2" Value="" />
  <Entry Key="Formula.VecRot.Mult3" Value="" />
  <Entry Key="Formula.VecRot.Power" Value="" />
  <Entry Key="Intern.Formula.Source" Value="&#xA;public override void Init() {&#xA;     base.Init();&#xA;     additionalPointInfo=new AdditionalPointInfo();&#xA;}&#xA;&#xA;&#xA;// Mandelbox&#xA;        public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;&#xA;  double gr=50000;&#xA;  double xx, yy, zz;&#xA;  long tw;&#xA;  int n;&#xA;  double x=ar,y=ai,z=aj;&#xA;   double r_n = 0;&#xA;&#xA;  xx = x * x; yy = y * y; zz = z * z; &#xA;  tw = 0L;&#xA;  double r = Math.Sqrt(xx + yy + zz);&#xA;  double scale = 1.1;&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;&#xA;  for (n = 1; n &lt; zkl; n++) {&#xA;&#xA;//              ; fold box onto itself  &#xA;&#xA;bool xChanged=false;&#xA;for (int i=0;i&lt;5;i++) {&#xA;xChanged=false;&#xA;   if (x &gt; 1){&#xA;      x = 2.0 - x;&#xA;xChanged=true;&#xA;&#xA;}&#xA;   else if (x &lt; -1){&#xA;      x = -2.0 - x;&#xA;xChanged=true;&#xA;&#xA;}&#xA;if(!xChanged)&#xA;  break;&#xA;}&#xA;&#xA;   if (y &gt; 1)&#xA;     y = 2.0 - y;&#xA;   else if (y &lt; -1)&#xA;      y = -2.0 - y;&#xA;             &#xA;   if (z &gt; 1)&#xA;     z = 2.0 - z;&#xA;   else if (z &lt; -1)&#xA;      z = -2.0 - z;&#xA;              &#xA;//  ; fold sphere onto itself&#xA;    double fixedRadius = 1;&#xA;  xx = x * x; yy = y * y; zz = z * z; &#xA;   double length=   r = xx + yy + zz;&#xA;&#xA;&#xA;if(r!=0 &amp;&amp; n&gt;50 &amp;&amp; n&lt;110) {&#xA;  additionalPointInfo.red+=xx/r;&#xA;  additionalPointInfo.green+=yy/r;&#xA;  additionalPointInfo.blue+=zz/r;&#xA;}&#xA;&#xA;if (length &gt; gr) { &#xA;   tw = n; break; &#xA;}&#xA;&#xA;   double mult=1;&#xA;&#xA; if (length &lt; fixedRadius &amp;&amp; length &gt;0) {&#xA;        mult=fixedRadius/(length);&#xA;  }&#xA;&#xA;   mult*=scale;&#xA;   x*=mult;&#xA;   y*=mult;&#xA;   z*=mult;&#xA;&#xA;if(x&lt;0) {x=-x;}&#xA;   x+=br;&#xA;   y+=bi;&#xA;   z+=bj;&#xA;}&#xA;&#xA;  if (invers) {&#xA;     if (tw == 0)&#xA;        tw = 1;&#xA;     else&#xA;        tw = 0;&#xA;   }&#xA;   return (tw);&#xA;&#xA;}&#xA;&#xA;" />
  <Entry Key="Transformation.3.AngleX" Value="0" />
  <Entry Key="Transformation.3.AngleY" Value="0" />
  <Entry Key="Transformation.3.AngleZ" Value="0" />
  <Entry Key="Transformation.3.CenterX" Value="-0.407525953022069" />
  <Entry Key="Transformation.3.CenterY" Value="2.56540588074062" />
  <Entry Key="Transformation.3.CenterZ" Value="0.07803688462125" />
  <Entry Key="Transformation.AngleX" Value="0" />
  <Entry Key="Transformation.AngleY" Value="0" />
  <Entry Key="Transformation.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleX.PARAMETERINFO.Description" Value="Rotation angle (in degree) for axis x (rotation center is center of the given bounds)." />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleY.PARAMETERINFO.Description" Value="Rotation angle (in degree) for axis y (rotation center is center of the given bounds)." />
  <Entry Key="Transformation.Camera.AngleZ" Value="160" />
  <Entry Key="Transformation.Camera.AngleZ.PARAMETERINFO.Description" Value="Rotation angle (in degree) for axis z (rotation center is center of the given bounds)." />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.3" />
  <Entry Key="Transformation.Perspective.Cameraposition.PARAMETERINFO.Description" Value="Distance to the virtual screen. Small values gives a more 3D effect. Large values gives the scene a parallel projection view." />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.Angle.PARAMETERINFO.Description" Value="Angle difference in stereo mode." />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="Transformation.Stereo.EyeDistance.PARAMETERINFO.Description" Value="EyeDistance in stereo mode." />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Height.PARAMETERINFO.Description" Value="View.Size*View.Height == height of the rendered bitmap." />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Perspective.PARAMETERINFO.Datatype" Value="Bool" />
  <Entry Key="View.Perspective.PARAMETERINFO.Description" Value="Switch between 3D view and parallel view." />
  <Entry Key="View.Width" Value="1200" />
  <Entry Key="View.Width.PARAMETERINFO.Description" Value="View.Size*View.Width == width of the rendered bitmap." />
</ParameterDict>
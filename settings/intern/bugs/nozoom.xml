<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Animation.Steps" Value="1" />
  <Entry Key="Border.Max.x" Value="-0.655398079320481" />
  <Entry Key="Border.Max.y" Value="-0.0476970995906994" />
  <Entry Key="Border.Max.z" Value="-2.34671465376782" />
  <Entry Key="Border.Min.x" Value="-0.761942890188332" />
  <Entry Key="Border.Min.y" Value="-0.15424191045855" />
  <Entry Key="Border.Min.z" Value="-2.45325946463567" />
  <Entry Key="Computation.NoOfThreads" Value="8" />
  <Entry Key="Formula.Static.Cycles" Value="300" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="300" />
  <Entry Key="Intern.Formula.Source" Value="public override void Init() {base.Init();additionalPointInfo=new AdditionalPointInfo();}&#xA;&#xA;&#xA;// Simplified Mandelbox&#xA;public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xA;&#xA;  double gr=50000; // bailoutValue&#xA;  double xx, yy, zz; // temp var&#xA;  long tw; // boring &#xA;  int n;&#xA;  double x=0,y=0,z=0;&#xA;  double r_n = 0;&#xA;&#xA;  xx = x * x; yy = y * y; zz = z * z; &#xA;  tw = 0L;&#xA; double r = Math.Sqrt(xx + yy + zz);&#xA;&#xA;// This fixid to a special non Julia-variant &#xA;  double scale = 1.1;&#xA;&#xA;  // Surface Coloring&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;&#xA;  for (n = 1; n &lt; zkl; n++) {&#xA;/*&#xA;   if (x &gt; 1) x = 2.0 - x; &#xA; if (x &gt; 1) x = 2.0 - x; &#xA; if (x &gt; 1) x = 2.0 - x; &#xA; if (x &gt; 1) x = 2.0 - x; &#xA; if (x &gt; 1) x = 2.0 - x; &#xA; if (x &gt; 1) x = 2.0 - x; &#xA;*/&#xA;&#xA;&#xA;&#xA; if (x &lt; -1) x = -2.0 - x;&#xA;             &#xA;  // if (y &gt; 1)    y = 2.0 - y;  else&#xA;  if (y &lt; -1) y = -2.0 - y;&#xA;             &#xA;  // if (z &gt; 1)   z = 2.0 - z; else&#xA;  if (z &lt; -1) z = -2.0 - z;&#xA;              &#xA;  //  ; fold sphere onto itself&#xA;  double fixedRadius = 1;&#xA;  double minRadius = 0.00001;&#xA;&#xA;  xx=x*x;yy=y*y;zz=z*z;&#xA;  double length=   r = xx + yy + zz;&#xA;&#xA;// Colors&#xA;  if(r!=0 &amp;&amp;n&gt;zkl/2) {&#xA;  additionalPointInfo.red=xx/r;&#xA;  additionalPointInfo.green=yy/r;&#xA;  additionalPointInfo.blue=zz/r;&#xA;  }&#xA;            &#xA;  // Bailout Condition&#xA;  if (length &gt; gr) {  tw = n; break; }&#xA;&#xA; double mult=1;&#xA;&#xA; if (length &lt; minRadius) {&#xA; //     mult=Math.Sqrt(fixedRadius)/(minRadius);&#xA; }   else&#xA; if (length &lt; fixedRadius) {&#xA;   mult=Math.Sqrt(fixedRadius)/(length);&#xA; }&#xA; mult*=scale;&#xA; x*=mult;&#xA; y*=mult;&#xA; z*=mult;&#xA;&#xA;// In Julia Mode: the fixed Julia values &#xA;// Iin Mandelbrot set mode: the room coordinates of the pixel to test &#xA;   x+=br;&#xA;   y+=bi;&#xA;   z+=bj;&#xA; }&#xA;&#xA;// For inside rendering&#xA;if (invers) {if (tw == 0) tw = 1; else tw = 0; } &#xA;&#xA;  // Warning: this valaue can be very dangereus, if it is used for distanve esitmation:&#xA;  // &#xA;  return (tw); &#xA;}&#xA;&#xA;" />
  <Entry Key="Renderer.AmbientIntensity" Value="0" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="0" />
  <Entry Key="Renderer.Light.X" Value="1" />
  <Entry Key="Renderer.Light.Y" Value="10" />
  <Entry Key="Renderer.Light.Z" Value="0" />
  <Entry Key="Renderer.LightIntensity" Value="0" />
  <Entry Key="Renderer.MaxFieldOfView" Value="1" />
  <Entry Key="Renderer.MinFieldOfView" Value="0.7" />
  <Entry Key="Renderer.Normalize" Value="0" />
  <Entry Key="Renderer.ShadowJustify" Value="3" />
  <Entry Key="Renderer.ShadowNumber" Value="30" />
  <Entry Key="Renderer.Shininess" Value="2" />
  <Entry Key="Renderer.ShininessFactor" Value="0.2" />
  <Entry Key="Renderer.UseDarken" Value="0" />
  <Entry Key="Renderer.UseLight" Value="0" />
  <Entry Key="Renderer.UseSharpShadow" Value="0" />
  <Entry Key="Transformation.Camera.AngleX" Value="90" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="180" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.3" />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="View.ClassicView" Value="" />
  <Entry Key="View.Deph" Value="800" />
  <Entry Key="View.DephAdd" Value="0" />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Perspective" Value="0" />
  <Entry Key="View.PosterX" Value="0" />
  <Entry Key="View.PosterZ" Value="0" />
  <Entry Key="View.Raster" Value="2" />
  <Entry Key="View.Size" Value="1" />
  <Entry Key="View.Width" Value="1200" />
</ParameterDict>
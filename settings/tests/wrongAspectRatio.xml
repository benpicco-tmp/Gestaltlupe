<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Border.Max.x" Value="0.329056034759643" />
  <Entry Key="Border.Max.x.PARAMETERINFO.Description" Value="Maximal X-Value." />
  <Entry Key="Border.Max.y" Value="0.222365439265871" />
  <Entry Key="Border.Max.y.PARAMETERINFO.Description" Value="Maximal y-Value." />
  <Entry Key="Border.Max.z" Value="-0.181150811488371" />
  <Entry Key="Border.Min.x" Value="-0.298736206915394" />
  <Entry Key="Border.Min.x.PARAMETERINFO.Description" Value="Minimal X-Value." />
  <Entry Key="Border.Min.y" Value="-0.19616272185082" />
  <Entry Key="Border.Min.y.PARAMETERINFO.Description" Value="Minimal Y-Value." />
  <Entry Key="Border.Min.z" Value="-0.599678972605061" />
  <Entry Key="Border.Min.z.PARAMETERINFO.Description" Value="Minimal Z-Value" />
  <Entry Key="Formula.Static.Cycles" Value="44" />
  <Entry Key="Formula.Static.Cycles.PARAMETERINFO.Description" Value="Number of iterations used in the formula." />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.Formula.PARAMETERINFO.Description" Value="-1: mandelbrot mode. -2: julia mode (Values from 1 to 26 corresponds to some inbuild formulas.)" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jx.PARAMETERINFO.Description" Value="X-component of the Julia Seed, if the formula is in julia mode. X-component of the start value , if the formula is in mandelbrot mode." />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jy.PARAMETERINFO.Description" Value="Y-component of the Julia Seed, if the formula is in julia mode. Y-component of the start value , if the formula is in mandelbrot mode." />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jz.PARAMETERINFO.Description" Value="Z-component of the Julia Seed, if the formula is in julia mode. Z-component of the start value , if the formula is in mandelbrot mode." />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.jzz.PARAMETERINFO.Description" Value="Q-component of the Julia Seed, if the formula is in julia mode." />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Formula.Static.MinCycle.PARAMETERINFO.Description" Value="Number of iterations used in the formula, if the inside of the 3D object is rendered." />
  <Entry Key="Intern.Formula.Source" Value="&#xD;&#xA;public override void Init() { &#xD;&#xA;  base.Init();&#xD;&#xA;  additionalPointInfo=new AdditionalPointInfo();&#xD;&#xA;  gr1=GetDouble(&quot;Formula.Static.Cycles&quot;);&#xD;&#xA;  int tempGr=(int)gr1;&#xD;&#xA;  gr1=gr1- tempGr;&#xD;&#xA;  gr1=1-gr1;&#xD;&#xA;  gr1*=2.4;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double gr1=0;&#xD;&#xA;&#xD;&#xA;public override long InSet(double ar, double ai, double aj,  double br, double bi, double bj, double bk, long zkl, bool invers) {&#xD;&#xA;  double aar, aai, aaj;&#xD;&#xA;  long tw;&#xD;&#xA;  int n;&#xD;&#xA;  int pow = 8; // n=8 default Mandelbulb&#xD;&#xA;  double gr =Math.Pow(10,gr1)+1.0;  // Bailout&#xD;&#xA;  double theta, phi;&#xD;&#xA;  double r_n = 0;&#xD;&#xA;  aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xD;&#xA;  tw = 0L;&#xD;&#xA;  double r = Math.Sqrt(aar + aai + aaj);&#xD;&#xA;  double  phi_pow,theta_pow,sin_theta_pow,rn_sin_theta_pow;&#xD;&#xA;&#xD;&#xA;  additionalPointInfo.red=0;&#xD;&#xA;  additionalPointInfo.green=0;&#xD;&#xA;  additionalPointInfo.blue=0;&#xD;&#xA;&#xD;&#xA;  for (n = 1; n &lt; zkl; n++) {&#xD;&#xA;    theta = Math.Atan2(Math.Sqrt(aar + aai), aj);&#xD;&#xA;    phi = Math.Atan2(ai, ar);&#xD;&#xA;    r_n = Math.Pow(r, pow);&#xD;&#xA;    phi_pow=phi*pow;&#xD;&#xA;    theta_pow=theta*pow;&#xD;&#xA;    sin_theta_pow=Math.Sin(theta_pow);&#xD;&#xA;    rn_sin_theta_pow=r_n* sin_theta_pow;&#xD;&#xA;    ar =  rn_sin_theta_pow * Math.Cos(phi_pow)+br;&#xD;&#xA;    ai = rn_sin_theta_pow * Math.Sin(phi_pow)+bi;&#xD;&#xA;    aj = r_n * Math.Cos(theta_pow)+bj;&#xD;&#xA;    aar = ar * ar; aai = ai * ai; aaj = aj * aj;&#xD;&#xA;    r = Math.Sqrt(aar + aai + aaj);&#xD;&#xA;    additionalPointInfo.red+=aar/r;&#xD;&#xA;    additionalPointInfo.green+=aai/r;&#xD;&#xA;    additionalPointInfo.blue+=aaj/r;&#xD;&#xA;    if (r &gt; gr) { tw = n; break; }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  if (invers) {&#xD;&#xA;     if (tw == 0)&#xD;&#xA;        tw = 1;&#xD;&#xA;      else&#xD;&#xA;        tw = 0;&#xD;&#xA;  }&#xD;&#xA;  return (tw);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleX.PARAMETERINFO.Description" Value="Rotation angle (in degree) for axis x (rotation center is center of the given bounds)." />
  <Entry Key="Transformation.Camera.AngleY" Value="90" />
  <Entry Key="Transformation.Camera.AngleY.PARAMETERINFO.Description" Value="Rotation angle (in degree) for axis y (rotation center is center of the given bounds)." />
  <Entry Key="Transformation.Camera.AngleZ" Value="90" />
  <Entry Key="Transformation.Camera.AngleZ.PARAMETERINFO.Description" Value="Rotation angle (in degree) for axis z (rotation center is center of the given bounds)." />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="0.6" />
  <Entry Key="Transformation.Perspective.Cameraposition.PARAMETERINFO.Description" Value="Distance to the virtual screen. Small values gives a more 3D effect. Large values gives the scene a parallel projection view." />
  <Entry Key="Transformation.Stereo.Angle" Value="-9" />
  <Entry Key="Transformation.Stereo.Angle.PARAMETERINFO.Description" Value="Angle difference in stereo mode." />
  <Entry Key="Transformation.Stereo.EyeDistance" Value="0.5" />
  <Entry Key="Transformation.Stereo.EyeDistance.PARAMETERINFO.Description" Value="EyeDistance in stereo mode." />
  <Entry Key="View.Height" Value="1200" />
  <Entry Key="View.Height.PARAMETERINFO.Description" Value="View.Size*View.Height == height of the rendered bitmap." />
  <Entry Key="View.Perspective" Value="1" />
  <Entry Key="View.Perspective.PARAMETERINFO.Datatype" Value="Bool" />
  <Entry Key="View.Perspective.PARAMETERINFO.Description" Value="Switch between 3D view and parallel view." />
  <Entry Key="View.Width" Value="1200" />
  <Entry Key="View.Width.PARAMETERINFO.Description" Value="View.Size*View.Width == width of the rendered bitmap." />
</ParameterDict>